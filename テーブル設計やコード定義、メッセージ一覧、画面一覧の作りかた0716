# システム設計書の作り方・読み方ガイド

## 1. テーブル定義書

### 概要
データベースのテーブル構造を定義する重要な設計書です。開発者がデータベースを作成・理解するために必要な情報をまとめています。

### 読み方のポイント

#### ヘッダー情報
- **作成者・更新者**: 誰が作成・更新したかを記録
- **作成日・更新日**: いつ作成・更新されたかを記録
- **テーブル名**: 論理的な名前（日本語）
- **テーブル物理名**: 実際のDB上での名前（英語）

#### カラム定義の見方
```
No | データ項目名 | データ項目ID | PK | FK | null | データ型 | 全体桁数 | 最小桁数 | 初期値 | 説明
```

**各項目の意味：**
- **PK（Primary Key）**: 主キー。テーブル内でレコードを一意に識別する項目
- **FK（Foreign Key）**: 外部キー。他のテーブルとの関連を示す項目
- **null**: NULL値を許可するかどうか
- **データ型**: VARCHAR（文字列）、INT（整数）など
- **全体桁数**: 最大の文字数や桁数
- **最小桁数**: 最小の文字数や桁数

### 作り方のコツ
1. **命名規則を統一する**（例：m01_insurance → マスタテーブルの01番）
2. **PKは必ず設定する**
3. **データ型は適切に選択する**
4. **説明は具体的に書く**

## 2. メッセージ定義書

### 概要
システムで表示するメッセージを一元管理する設計書です。エラーメッセージや確認メッセージなどを定義します。

### 読み方のポイント

#### 項目の意味
- **メッセージID**: システム内でメッセージを識別するID
- **内容（概要）**: 実際に表示されるメッセージ
- **説明**: メッセージの用途や表示タイミング

### 作り方のコツ
1. **IDは体系的に管理する**（例：VKCOはシステムコード）
2. **ユーザーにとって分かりやすい文言にする**
3. **似たような用途のメッセージはIDを近くにする**
4. **多言語対応を考慮する**

## 3. コード定義書

### 概要
システムで使用するコード値とその意味を定義する設計書です。性別、都道府県、ステータスなどの分類値を管理します。

### 読み方のポイント

#### 項目の意味
- **グループID**: 同じ種類のコードをまとめるID
- **グループ名**: コードの分類名
- **コードID**: 実際にシステムで使用する値
- **コード名**: コードの表示名

### 作り方のコツ
1. **グループIDは3桁程度で統一する**
2. **コードIDは連番または意味のある値にする**
3. **将来の拡張を考慮して番号を飛ばす**
4. **削除されたコードも履歴として残す**

## 4. 画面一覧

### 概要
システムの全画面を一覧化し、各画面のアクセス権限を定義する設計書です。

### 読み方のポイント

#### 項目の意味
- **機能カテゴリ**: 画面のグループ分け
- **画面ID**: 画面を識別するID
- **画面名**: 画面の名称
- **利用者**: 各ユーザー種別のアクセス権限（●=利用可能、-=利用不可）

### 作り方のコツ
1. **画面IDは体系的に管理する**（例：G00は共通画面）
2. **権限設計は最小権限の原則に従う**
3. **画面間の遷移関係も考慮する**
4. **将来の機能追加を考慮したID体系にする**

## 設計書全般の注意点

### 品質向上のポイント
1. **一貫性を保つ**: 命名規則や記述方法を統一
2. **具体性を重視**: 曖昧な表現を避け、具体的に記述
3. **更新履歴を管理**: 変更時は必ず更新者・更新日を記録
4. **レビューを実施**: 複数人でチェックして品質を確保

### よくある間違い
- データ型の不適切な選択
- 主キーの設定漏れ
- 外部キー関係の記述不足
- メッセージの重複定義
- 権限設計の不備

## まとめ

設計書は開発チーム全体で共有する重要な資料です。正確で分かりやすい設計書を作成することで、開発効率が向上し、保守性の高いシステムを構築できます。最初は時間がかかりますが、慣れてくると自然に品質の高い設計書が書けるようになります。
