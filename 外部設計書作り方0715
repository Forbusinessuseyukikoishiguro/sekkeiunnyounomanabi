# 外部設計書作成ガイド - 新人エンジニア向け

## 1. 外部設計書とは？

外部設計書は、システムの「外から見える部分」を定義する設計書です。ユーザーが実際に操作する画面や機能を詳細に記述し、開発チーム全体で共通理解を持つためのドキュメントです。

**内部設計書との違い：**
- **外部設計書**: ユーザーが見る画面、操作の流れ、入力項目など
- **内部設計書**: データベース設計、プログラムの処理ロジック、クラス設計など

## 2. 外部設計書の構成要素

### 2.1 基本情報
- **文書タイトル**: 「〇〇システム外部設計書」
- **作成者・作成日**: 責任の所在を明確化
- **更新者・更新日**: 変更履歴の管理
- **版数管理**: v1.0, v1.1 など

### 2.2 画面一覧
システム内の全画面を一覧化し、以下を記載：
- **画面ID**: G01, G02 など（統一的な命名規則）
- **画面名**: 「シミュレーション」「ユーザー登録」など
- **利用者**: 誰がアクセスできるか
- **機能カテゴリ**: 関連する機能でグループ化

### 2.3 画面仕様（各画面ごと）

#### A. 画面レイアウト
```
画面ID: G01
画面名: シミュレーション
```

**記載内容：**
- 画面の全体的な構成
- セクション分け（ヘッダー、メイン、フッター等）
- 表示パターン（PC/スマートフォン）
- 画面概要（この画面で何ができるか）

#### B. 画面項目仕様
各入力項目について詳細に定義：

| 項目 | 内容 | 例 |
|------|------|-----|
| **項目名** | 画面上の表示名 | 「入院給付金日額」 |
| **種別** | 入力方式 | プルダウン、テキストボックス、ラジオボタン |
| **I/O** | 入力(I)か出力(O)か | I（入力項目） |
| **初期表示** | 画面表示時のデフォルト値 | [5000] |
| **桁数** | 入力可能文字数 | 整数5桁、小数2桁 |
| **選択肢** | 選択可能な値 | [3,000]、[4,000]、[5,000] |
| **入力チェック** | バリデーション仕様 | 必須、数値のみ、範囲チェック |
| **必須** | 入力が必須か | 〇（必須）、△（条件付き） |
| **備考** | 特記事項 | 年齢制限、他項目との連動など |

#### C. イベント処理
- **ボタン押下時の動作**: 「計算」ボタンを押したときの処理
- **項目変更時の動作**: プルダウン選択時の他項目への影響
- **画面遷移**: 次に表示される画面

### 2.4 変更履歴
文書の変更を記録：
- **変更日**: いつ変更したか
- **版数**: バージョン管理
- **変更箇所**: どの部分を変更したか
- **変更内容**: 具体的な変更内容
- **変更者**: 誰が変更したか

## 3. 作成手順

### ステップ1: 要件整理
- 何を作るシステムか明確化
- 利用者（ユーザー）の特定
- 主要な機能の洗い出し

### ステップ2: 画面構成検討
- 必要な画面数の把握
- 画面間の遷移フロー作成
- 画面のグループ化（機能カテゴリ分け）

### ステップ3: 画面詳細設計
- 各画面のレイアウト設計
- 入力項目の詳細仕様決定
- バリデーション仕様の検討

### ステップ4: レビュー・調整
- 関係者レビュー実施
- 指摘事項の修正
- 最終化

## 4. 作成時のポイント

### 4.1 ユーザー視点で考える
- 「技術者が作りやすい」ではなく「ユーザーが使いやすい」
- 直感的な操作フローの設計
- エラーメッセージも分かりやすく

### 4.2 具体的に記述する
❌ 悪い例：「適切な値を入力」
✅ 良い例：「3,000円～10,000円の範囲で1,000円単位で入力」

### 4.3 例外パターンも考慮
- エラー時の表示内容
- 必須項目未入力時の動作
- 想定外データ入力時の処理

### 4.4 一貫性を保つ
- 命名規則の統一（画面ID、項目名など）
- 表記ゆれの回避
- デザインパターンの統一

## 5. よくある失敗例と対策

### 失敗例1: 曖昧な仕様記述
**問題**: 「入力値をチェックする」
**対策**: 「3桁以上8桁以下の半角数字のみ入力可能。範囲外の場合は『3-8桁の数字で入力してください』とエラー表示」

### 失敗例2: 画面遷移の記載漏れ
**問題**: ボタン押下後の動作が不明
**対策**: 各操作後の画面遷移を明記

### 失敗例3: 条件分岐の見落とし
**問題**: 「年齢によって表示項目が変わる」仕様の記載不足
**対策**: 条件ごとの表示パターンを明確化

## 6. 実践的なテンプレート

```
【画面仕様テンプレート】

画面ID: G##
画面名: ○○○○

■ 画面概要
この画面の目的と主な機能を記載

■ 利用者
- 一般ユーザー: ○
- 管理者: ×

■ 表示条件
- 初期表示: ○○の場合
- 非表示: ××の場合

■ 項目一覧
No. | 項目名 | 種別 | 初期値 | 必須 | 備考
----|--------|------|--------|------|------
1   | ○○○   | プルダウン | [選択してください] | ○ | 

■ イベント処理
- [確認]ボタン押下時
  → 入力チェック実行
  → 正常時：G##画面へ遷移
  → エラー時：エラーメッセージ表示

■ エラーメッセージ
- 必須項目未入力: 「○○を選択してください」
- 範囲外入力: 「○○は××～××の範囲で入力してください」
```

## 7. チェックリスト

設計書完成前の確認項目：

- [ ] 全画面の仕様が記載されている
- [ ] 項目の入力仕様が具体的に記載されている
- [ ] 画面遷移が明確になっている
- [ ] エラーパターンが考慮されている
- [ ] 利用者権限が適切に設定されている
- [ ] 変更履歴が記録されている
- [ ] 関係者レビューが完了している

## 8. まとめ

外部設計書は「システムの設計図」です。建築の設計図と同じく、詳細で正確な記述が重要です。

**重要な心構え：**
- ユーザーの立場で考える
- 具体的で分かりやすい記述
- 一貫性のある仕様
- 継続的な更新・改善

最初は完璧を求めず、基本的な項目から始めて徐々に詳細化していくことが大切です。経験を積むことで、より良い設計書が書けるようになります。
