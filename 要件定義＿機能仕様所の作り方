# 機能仕様書の作り方・読み方 完全ガイド

## 1. 機能仕様書とは何か

機能仕様書は、システムの**具体的な動作**を詳細に記述した設計書です。「何を作るか」を明確にし、開発者が実装するための設計図となります。

### 基本的な役割
- **開発者向け**：実装の詳細な指示書
- **テスト担当者向け**：テストケース作成の基準
- **関係者向け**：システムの動作を理解するための資料

## 2. 機能仕様書の構成要素

### 2.1 基本情報
```
作成者：JS広瀬
作成日：2025/04/14
更新者：[更新者名]
更新日：[更新日]
```

### 2.2 機能番号体系
例：`３．２．１．申込番号体系`
- 大分類（３）→ 中分類（２）→ 小分類（１）
- 階層的に整理することで、機能の位置づけが明確になる

### 2.3 参照情報
`【QANo.9】`のような形で、質問や課題との対応関係を明記

## 3. 実際の仕様書の読み方

### 3.1 画面仕様の例
```
３．２．２．重要事項確認画面
（１）乗換に関する特約 【QANo.27】
WEB申込では「乗換に関する特約」のお取り扱いができない為、
「なないろメディカル　盾」の申込時において重要事項確認画面に
確認チェック欄を設ける。
```

**読み方のポイント**：
- **何を**：重要事項確認画面に確認チェック欄
- **なぜ**：WEB申込では特約の取り扱いができないため
- **いつ**：「なないろメディカル　盾」の申込時
- **どこに**：重要事項確認画面

### 3.2 条件分岐の例
```
（現行）20歳以上の「なないろスリー」申込時のみ表示する。
※以下の申込時は非表示
　・19歳以下の「なないろスリー」
　・「なないろメディカル礎」「なないろメディカル礎　女性専用」「なないろセブン」

（対応後）20歳以上の「なないろスリー」申込時および
特定疾病治療保険（特定３大疾病型）申込時のみ表示する。
```

**読み方のポイント**：
- **現行**と**対応後**の違いを明確に記載
- **表示条件**と**非表示条件**を具体的に列挙
- **例外処理**も含めて網羅的に記述

### 3.3 画面遷移の例
```
告知画面：適用料率をポップアップメッセージで表示する。
意向確認画面：「現在の申込プラン」情報内に適用料率および適用する保険料を表示する。
申込内容確認画面：画面内の保障内容に適用料率および適用する保険料を表示する。
```

**読み方のポイント**：
- 各画面での**表示内容**を具体的に記述
- 画面間の**データの流れ**を追跡できる
- **一貫性**を保った表示方法を定義

## 4. 機能仕様書の作り方

### 4.1 構造化の原則

#### 階層構造で整理
```
３．機能要件
　３．２．機能仕様書（申込手続機能）
　　３．２．１．申込番号体系
　　３．２．２．重要事項確認画面
　　　（１）乗換に関する特約
　　　（２）契約概要／注意喚起情報
```

#### 機能ごとの記述項目
1. **機能名**：何の機能か
2. **概要**：機能の目的
3. **詳細仕様**：具体的な動作
4. **画面表示**：ユーザーに見える内容
5. **条件・制約**：動作の前提条件
6. **エラー処理**：異常時の対応

### 4.2 記述のポイント

#### 明確な条件記述
```
❌ 悪い例：「適切な場合に表示する」
✅ 良い例：「20歳以上の「なないろスリー」申込時のみ表示する」
```

#### 具体的な動作記述
```
❌ 悪い例：「確認画面を表示する」
✅ 良い例：「重要事項確認画面に確認チェック欄を設ける」
```

#### 例外処理の明記
```
✅ 良い例：「最低保険料以下の場合は「次へ進む」ボタンは非活性のままとする」
```

### 4.3 表形式の活用

商品マスタなど複雑な対応関係は表で整理：

| 保険種類 | 主契約名称 | 保険プラン |
|----------|------------|------------|
| 231 | がん診断一時金保険（無解約返戻金型）（２０２５） | なないろがん保険 盾　一時金保障プラン |
| 233 | がん診断一時金保険（無解約返戻金型）（２０２５） | なないろがん保険 盾　一時金保障プラン |

## 5. 読み手を意識した書き方

### 5.1 開発者向けのポイント
- **実装に必要な情報**を漏れなく記載
- **技術的制約**を明確に記述
- **テストケース**を想定した記述

### 5.2 関係者向けのポイント
- **業務的な意味**を説明
- **ユーザー影響**を明記
- **運用上の注意点**を記載

## 6. よくある問題と対策

### 6.1 曖昧な表現を避ける
```
❌ 「適当に表示する」
❌ 「必要に応じて処理する」
❌ 「通常の場合は」
```

### 6.2 網羅性を確保する
- **全ての条件分岐**を記述
- **例外ケース**も含める
- **エラーハンドリング**を明記

### 6.3 一貫性を保つ
- **用語の統一**
- **記述形式の統一**
- **粒度の統一**

## 7. チェックリスト

### 作成時のチェックポイント
- [ ] 機能の目的が明確か
- [ ] 実装に必要な情報は揃っているか
- [ ] 条件分岐は網羅されているか
- [ ] エラー処理は定義されているか
- [ ] 用語は統一されているか
- [ ] 他の仕様書との整合性は取れているか

### 読解時のチェックポイント
- [ ] 機能の全体像を把握できたか
- [ ] 実装すべき内容は理解できたか
- [ ] 不明な点や矛盾点はないか
- [ ] テストケースを想定できるか

## 8. 実践的なアドバイス

### 8.1 新人エンジニアへの Tips
1. **最初は全体を俯瞰**してから詳細に入る
2. **不明な点は積極的に質問**する
3. **実装前に理解度を確認**する
4. **テストケースを想定**しながら読む

### 8.2 仕様書作成時の Tips
1. **読み手の立場**を考えて書く
2. **段階的に詳細化**する
3. **図表を活用**して理解しやすくする
4. **レビューを必ず実施**する

機能仕様書は「作る人」と「使う人」を繋ぐ重要な橋渡し役です。明確で網羅的な記述を心がけ、継続的な改善を行うことで、より良いシステム開発に貢献できます。
