# 新人エンジニア向け：システム設計書の基本ガイド

システム開発において、設計書は「システムの設計図」のような存在です。建築でいえば、設計図なしに家を建てることができないように、システムも設計書なしに開発することはできません。

今回は、新人エンジニアが最初に知っておくべき設計書の種類と内容について、わかりやすく解説します。

## 設計書の全体像

システム開発では、大きく分けて「外部設計」と「詳細設計」の2つの段階があります。

- **外部設計**：「何を作るか」を決める設計
- **詳細設計**：「どのように作るか」を決める設計

## 外部設計書の種類

### 1. コード定義書

**これは何？**
システムで使用するコード（識別子）のルールを定めた文書です。

**具体例**
- 都道府県コード（01:北海道、02:青森県...）
- 商品カテゴリコード（A001:食品、B001:衣類...）
- エラーコード（E001:必須入力エラー、E002:形式エラー...）

**なぜ必要？**
- 開発者全員が同じコード体系を使用するため
- データの整合性を保つため
- 他システムとの連携時にコードの意味を統一するため

### 2. テーブル設計書

**これは何？**
データベースのテーブル構造を定義した文書です。

**主な内容**
- **論理設計**：業務的な観点でのテーブル設計
- **物理設計**：実際のデータベースに合わせた詳細設計
- **ER図**：テーブル間の関係を図で表現

**例：ユーザーテーブル**
| カラム名 | データ型 | 必須 | 説明 |
|---------|----------|------|------|
| user_id | INT | ○ | ユーザーID（主キー） |
| name | VARCHAR(100) | ○ | ユーザー名 |
| email | VARCHAR(255) | ○ | メールアドレス |
| created_at | DATETIME | ○ | 作成日時 |

### 3. バッチ仕様書

**これは何？**
定期的に自動実行される処理（バッチ処理）の仕様を定めた文書です。

**具体例**
- 毎日深夜に実行される売上集計処理
- 月末に実行される請求書作成処理
- 定期的なデータバックアップ処理

**記載内容**
- 処理の目的と概要
- 実行タイミング（毎日2:00など）
- 入力データと出力データ
- エラー時の対応方法

## 詳細設計書の種類

### 1. フロント設計書

**これは何？**
ユーザーが直接触れる画面部分（UI）の設計を定めた文書です。

**主な内容**
- **画面レイアウト**：ボタンや入力欄の配置
- **画面遷移図**：どの画面からどの画面に移動するか
- **入力チェック**：必須入力、文字数制限など
- **JavaScript処理**：ボタンクリック時の動作など

**例：ログイン画面**
```
[ユーザー名入力欄] ※必須、20文字以内
[パスワード入力欄] ※必須、8文字以上
[ログインボタン] ※クリック時にサーバーへ認証要求
```

### 2. サーバー設計書

**これは何？**
サーバー側（バックエンド）の処理を定めた文書です。

**主な内容**
- **API設計**：フロントとサーバー間の通信仕様
- **アーキテクチャ設計**：システムの全体構成
- **セキュリティ設計**：認証・認可の仕組み
- **外部連携**：他システムとの連携方法

**例：ユーザー登録API**
```
エンドポイント: POST /api/users
リクエスト:
{
  "name": "田中太郎",
  "email": "tanaka@example.com"
}
レスポンス:
{
  "user_id": 123,
  "message": "ユーザー登録が完了しました"
}
```

### 3. プログラム処理一覧

**これは何？**
実際に作成するプログラムの一覧と、それぞれの処理内容を整理した文書です。

**記載内容**
- 機能別のプログラム一覧
- 各プログラムの役割
- プログラム間の呼び出し関係
- 共通で使用する部品の仕様

**例**
| プログラム名 | 処理概要 | 入力 | 出力 |
|-------------|----------|------|------|
| UserController | ユーザー関連の画面制御 | 画面操作 | 画面表示 |
| UserService | ユーザー業務処理 | ユーザー情報 | 処理結果 |
| UserRepository | ユーザーデータ操作 | SQL | データ |

## 新人エンジニアが覚えておくべきポイント

### 1. 設計書は「共通言語」
設計書は、開発チーム全員が同じ理解を持つための「共通言語」です。あいまいな表現ではなく、誰が読んでも同じ理解ができる内容にすることが重要です。

### 2. 実装前に必ず確認
コードを書く前に、必ず設計書を確認しましょう。設計書と異なる実装をすると、後で大きな問題になる可能性があります。

### 3. 疑問点は早めに質問
設計書を読んで理解できない部分があれば、早めに先輩や設計者に質問しましょう。勝手な判断で実装を進めると、手戻りが発生する可能性があります。

### 4. 設計書は「生きた文書」
開発中に仕様変更があった場合、設計書も更新する必要があります。古い設計書のままだと、新しく参加したメンバーが混乱してしまいます。

## まとめ

設計書は、システム開発における「設計図」であり、開発チーム全員が共有すべき重要な文書です。最初は内容が複雑に感じるかもしれませんが、実際のプロジェクトで経験を積むことで、次第に理解が深まります。

新人エンジニアの皆さんは、まずは設計書を「読む」ことから始めて、徐々に「書く」スキルも身につけていきましょう。設計書をしっかりと理解することで、より良いシステム開発ができるようになります。
