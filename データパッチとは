データパッチについて詳しく解説いたします。

## データパッチとは

**データパッチ（Data Patch）**とは、システム運用中にデータベースや設定ファイルなどのデータを修正・更新するための作業やスクリプトのことです。プログラムのバグ修正やシステム改修とは異なり、データそのものに対する変更を行います。

---

## データパッチが必要になる場面

### 1. データ不整合の修正
- **例**: 顧客マスタで同一人物が重複登録されている
- **対応**: 重複データの統合・削除

### 2. 仕様変更に伴うデータ更新
- **例**: 消費税率変更（8%→10%）に伴う商品価格の一括更新
- **対応**: 全商品の税込価格を再計算・更新

### 3. マスタデータの修正
- **例**: 部署統合により部署コードを変更
- **対応**: 社員マスタの所属部署コード一括変更

### 4. データ移行に伴う調整
- **例**: 旧システムから移行したデータの形式変換
- **対応**: 日付形式の統一、文字コード変換

### 5. バグによる不正データの修正
- **例**: プログラムバグで誤った計算結果がDBに保存
- **対応**: 正しい値での再計算・更新

---

## データパッチの種類

### 1. SQLスクリプト
```sql
-- 例：消費税率変更対応
UPDATE products 
SET tax_included_price = base_price * 1.10 
WHERE tax_included_price = base_price * 1.08;

-- 例：部署統合対応
UPDATE employees 
SET department_code = 'SALES' 
WHERE department_code IN ('SALES_A', 'SALES_B');
```

### 2. データ変換スクリプト
```python
# 例：日付形式の統一
import pandas as pd
from datetime import datetime

# CSVファイルの読み込み
df = pd.read_csv('customer_data.csv')

# 日付形式の変換
df['birth_date'] = pd.to_datetime(df['birth_date'], format='%Y/%m/%d')
df['birth_date'] = df['birth_date'].dt.strftime('%Y-%m-%d')

# 更新されたデータの保存
df.to_csv('customer_data_updated.csv', index=False)
```

### 3. 設定ファイル更新
```json
// 例：APIエンドポイントの変更
{
  "api_endpoints": {
    "old_endpoint": "https://api-v1.example.com",
    "new_endpoint": "https://api-v2.example.com"
  },
  "timeout": 30000
}
```

---

## データパッチ作成の手順

### 1. 要件分析
- 修正が必要なデータの特定
- 修正内容の明確化
- 影響範囲の調査

### 2. 対象データの調査
```sql
-- 修正対象データの件数確認
SELECT COUNT(*) FROM products WHERE tax_rate = 0.08;

-- サンプルデータの確認
SELECT * FROM products WHERE tax_rate = 0.08 LIMIT 10;
```

### 3. パッチスクリプトの作成
```sql
-- データパッチスクリプト例
-- 作成者: 山田太郎
-- 作成日: 2024-07-15
-- 目的: 消費税率変更対応（8% → 10%）

-- 事前確認
SELECT 'Before Update' as status, COUNT(*) as count 
FROM products WHERE tax_rate = 0.08;

-- データ更新
BEGIN;

UPDATE products 
SET 
    tax_rate = 0.10,
    tax_included_price = ROUND(base_price * 1.10),
    updated_at = NOW(),
    updated_by = 'data_patch_20240715'
WHERE tax_rate = 0.08;

-- 事後確認
SELECT 'After Update' as status, COUNT(*) as count 
FROM products WHERE tax_rate = 0.10;

-- 結果に問題がなければコミット
-- COMMIT;
-- 問題があればロールバック
-- ROLLBACK;
```

### 4. テスト環境での検証
- 開発環境での動作確認
- テストデータでの検証
- 想定される結果との比較

### 5. 本番環境での実行
- バックアップの取得
- メンテナンス時間での実行
- 実行結果の確認

---

## データパッチ実行時の注意点

### 1. 事前準備
```bash
# データベースバックアップの取得
mysqldump -u root -p database_name > backup_20240715.sql

# 対象テーブルのみバックアップ
mysqldump -u root -p database_name products > products_backup_20240715.sql
```

### 2. 安全な実行方法
```sql
-- トランザクションを使用した安全な実行
BEGIN;

-- 更新前の状態を記録
CREATE TEMPORARY TABLE products_backup AS 
SELECT * FROM products WHERE tax_rate = 0.08;

-- データ更新実行
UPDATE products 
SET tax_rate = 0.10, tax_included_price = base_price * 1.10 
WHERE tax_rate = 0.08;

-- 結果確認
SELECT 
    (SELECT COUNT(*) FROM products_backup) as before_count,
    (SELECT COUNT(*) FROM products WHERE tax_rate = 0.10) as after_count;

-- 問題なければコミット、問題があればロールバック
-- COMMIT; または ROLLBACK;
```

### 3. 実行ログの記録
```sql
-- パッチ実行履歴テーブルの作成
CREATE TABLE data_patch_history (
    id INT AUTO_INCREMENT PRIMARY KEY,
    patch_name VARCHAR(100) NOT NULL,
    executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    executed_by VARCHAR(50) NOT NULL,
    affected_rows INT,
    status ENUM('SUCCESS', 'FAILED', 'ROLLBACK'),
    notes TEXT
);

-- パッチ実行の記録
INSERT INTO data_patch_history 
(patch_name, executed_by, affected_rows, status, notes)
VALUES 
('tax_rate_update_20240715', 'admin', 1500, 'SUCCESS', '消費税率変更対応完了');
```

---

## データパッチのベストプラクティス

### 1. 命名規則
```
データパッチファイル名の例：
- patch_YYYYMMDD_HHmm_description.sql
- patch_20240715_1400_tax_rate_update.sql
- patch_20240715_1500_department_merge.sql
```

### 2. スクリプトの構成
```sql
-- ===================================
-- データパッチスクリプト
-- ===================================
-- パッチID: PATCH-2024-001
-- 作成者: 山田太郎
-- 作成日: 2024-07-15
-- 目的: 消費税率変更対応
-- 対象テーブル: products
-- 予想実行時間: 5分
-- 予想対象レコード数: 1,500件
-- ===================================

-- 実行前チェック
SELECT 'パッチ実行前の状態確認' as check_point;
SELECT tax_rate, COUNT(*) FROM products GROUP BY tax_rate;

-- 実行環境確認
SELECT DATABASE() as current_database, NOW() as execution_time;

-- メイン処理
BEGIN;

-- 処理1: 商品マスタの税率更新
UPDATE products 
SET 
    tax_rate = 0.10,
    tax_included_price = ROUND(base_price * 1.10),
    updated_at = NOW()
WHERE tax_rate = 0.08;

-- 実行結果確認
SELECT ROW_COUNT() as affected_rows;

-- 処理2: 履歴テーブルへの記録
INSERT INTO price_change_history 
(product_id, old_tax_rate, new_tax_rate, changed_at)
SELECT id, 0.08, 0.10, NOW() 
FROM products WHERE tax_rate = 0.10;

-- 最終確認
SELECT 'パッチ実行後の状態確認' as check_point;
SELECT tax_rate, COUNT(*) FROM products GROUP BY tax_rate;

-- 問題なければコミット
COMMIT;
```

### 3. チェックリスト
```
【実行前チェック】
□ バックアップの取得完了
□ テスト環境での検証完了
□ 対象データ件数の確認
□ 実行時間の見積もり
□ 関係者への事前通知
□ メンテナンス時間の確保

【実行中チェック】
□ トランザクション開始
□ 各ステップの結果確認
□ エラーログの監視
□ 実行時間の監視

【実行後チェック】
□ 更新件数の確認
□ データ整合性の確認
□ アプリケーション動作確認
□ 実行ログの保存
□ 関係者への完了報告
```

---

## よくある失敗パターンと対策

### 1. WHERE句の条件不備
```sql
-- ❌ 危険な例（WHERE句なし）
UPDATE products SET price = price * 1.1;

-- ✅ 安全な例（適切なWHERE句）
UPDATE products 
SET price = price * 1.1 
WHERE category = 'electronics' AND price > 0;
```

### 2. データ型の不一致
```sql
-- ❌ 問題のある例
UPDATE users SET birth_date = '2024/07/15';  -- 形式が不正

-- ✅ 正しい例
UPDATE users SET birth_date = '2024-07-15';  -- ISO形式
```

### 3. 外部キー制約の考慮不足
```sql
-- 外部キー制約を考慮した更新順序
-- 1. 子テーブルの更新
UPDATE order_details SET product_id = new_id WHERE product_id = old_id;

-- 2. 親テーブルの更新
UPDATE products SET id = new_id WHERE id = old_id;
```

---

データパッチは慎重に計画・実行する必要がある重要な作業です。必ずバックアップを取得し、テスト環境で十分に検証してから本番環境で実行するようにしましょう。
