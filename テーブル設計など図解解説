# 新人エンジニア必見！システム設計書の作り方のコツ

## はじめに

システム開発において設計書は「設計図」のような存在です。建築で言えば、設計図なしに家を建てることができないように、システム開発でも設計書なしに良いシステムを作ることはできません。

```
建築の場合：
設計図 → 基礎工事 → 建築工事 → 完成

システム開発の場合：
設計書 → データベース構築 → プログラム開発 → システム完成
```

この記事では、新人エンジニアの皆さんが実際の現場で必要になる4つの重要な設計書について、**作り方のコツ**を中心に解説します。

## 1. テーブル定義書：データベースの設計図を作る

### テーブル定義書とは？

データベースのテーブル構造を定義する設計書です。「どんなデータを」「どのような形式で」「どこに格納するか」を明確にします。

### 設計書の構成図

```
┌─────────────────────────────────────────────────────┐
│                テーブル定義書                        │
├─────────────────────────────────────────────────────┤
│ ヘッダー情報                                         │
│ ・テーブル名（論理名）                                │
│ ・テーブル物理名                                      │
│ ・作成者、更新者、日付                                │
├─────────────────────────────────────────────────────┤
│ カラム定義                                           │
│ ┌─────┬─────────┬─────┬────┬────┬─────┐      │
│ │  No │項目名      │  PK │ FK │null│データ型│      │
│ ├─────┼─────────┼─────┼────┼────┼─────┤      │
│ │  1  │商品コード   │  ○ │    │  × │VARCHAR │      │
│ │  2  │商品名      │    │    │    │VARCHAR │      │
│ │  3  │カテゴリID   │    │ ○ │    │   INT  │      │
│ └─────┴─────────┴─────┴────┴────┴─────┘      │
└─────────────────────────────────────────────────────┘
```

### 作り方の基本ステップ

#### Step 1: テーブル名を決める

```
【命名規則の例】
論理名：商品マスタ ← 業務で使う名前
物理名：m01_product ← システムで使う名前
        ↑      ↑
    テーブル種別  具体的な名前
    (m=マスタ)
```

**コツ：**
- 論理名は業務的な意味が分かる名前にする
- 物理名は命名規則に従う
- 略語は統一したルールで使用する

#### Step 2: カラム設計の流れ

```
業務要件 → 必要なデータ項目 → カラム設計

例：ECサイトの商品管理
「商品を管理したい」
↓
「商品コード、商品名、価格、在庫数が必要」
↓
┌─────────────────────────────────────┐
│ product_cd   : VARCHAR(10) PK      │
│ product_name : VARCHAR(100)        │
│ price        : INT                 │
│ stock_qty    : INT                 │
└─────────────────────────────────────┘
```

#### Step 3: 主キー（PK）の設計パターン

```
パターン1：自然キー（意味のある値）
┌─────────────────────┐
│ product_cd  │ PK     │
│ P001        │        │
│ P002        │        │
└─────────────────────┘

パターン2：サロゲートキー（連番）
┌─────────────────────┐
│ id          │ PK     │
│ 1           │        │
│ 2           │        │
└─────────────────────┘

パターン3：複合キー（複数項目の組み合わせ）
┌─────────────────────────────┐
│ order_id    │ PK1    │
│ product_cd  │ PK2    │
│ 1001        │ P001   │
│ 1001        │ P002   │
└─────────────────────────────┘
```

**コツ：**
- 単一項目の主キーを推奨
- 意味のある値か連番かはプロジェクトの方針に従う
- 複合キーは避けられるなら避ける

#### Step 4: データ型の選び方

```
データ型選択フローチャート

文字列？ → YES → 固定長？ → YES → CHAR(n)
         ↓              ↓
         NO              NO
         ↓              ↓
       数値？           VARCHAR(n)
         ↓
       YES → 整数？ → YES → INT
         ↓         ↓
         NO        NO
         ↓         ↓
       日付？      DECIMAL(p,s)
         ↓
       YES → 日付のみ？ → YES → DATE
         ↓            ↓
         NO           NO
         ↓            ↓
       論理値？       DATETIME
         ↓
       YES → BOOLEAN
```

**よく使うデータ型：**
```
VARCHAR(n)  : 可変長文字列（商品名など）
CHAR(n)     : 固定長文字列（コード類）
INT         : 整数（価格、数量など）
DECIMAL(p,s): 小数点あり数値（単価など）
DATE        : 日付（登録日など）
DATETIME    : 日時（更新日時など）
BOOLEAN     : 真偽値（削除フラグなど）
```

### 実践例：商品マスタの設計

```
テーブル名：商品マスタ
物理名：m01_product

設計のポイント：
1. 商品コードは業務で使用される意味のある値
2. 商品名は十分な長さを確保
3. 価格は整数で管理（消費税計算を考慮）
4. 作成日時・更新日時は必須項目として追加

┌─────────────────────────────────────────────────────┐
│ No │ 項目名     │ 物理名        │ PK │データ型   │桁数│
├─────┼─────────┼─────────────┼────┼─────────┼────┤
│ 1  │商品コード   │product_cd    │ ○ │VARCHAR   │ 10 │
│ 2  │商品名      │product_name  │   │VARCHAR   │100 │
│ 3  │価格        │price         │   │INT       │    │
│ 4  │在庫数      │stock_qty     │   │INT       │    │
│ 5  │削除フラグ   │delete_flag   │   │BOOLEAN   │    │
│ 6  │作成日時     │created_at    │   │DATETIME  │    │
│ 7  │更新日時     │updated_at    │   │DATETIME  │    │
└─────┴─────────┴─────────────┴────┴─────────┴────┘
```

## 2. メッセージ定義書：ユーザーに優しいメッセージを作る

### メッセージ定義書とは？

システムで表示するメッセージを一元管理する設計書です。エラーメッセージ、確認メッセージ、情報メッセージなどを定義します。

### メッセージ分類の体系図

```
システムメッセージ全体
├── エラーメッセージ（E001～E999）
│   ├── 入力エラー（E001～E099）
│   ├── システムエラー（E100～E199）
│   └── 業務エラー（E200～E299）
├── 警告メッセージ（W001～W999）
│   ├── 確認メッセージ（W001～W099）
│   └── 注意メッセージ（W100～W199）
└── 情報メッセージ（I001～I999）
    ├── 成功メッセージ（I001～I099）
    └── 案内メッセージ（I100～I199）
```

### 作り方の基本ステップ

#### Step 1: メッセージIDの設計

```
【ID体系の例】
SYSE001 = SYS（システムコード） + E（エラー） + 001（連番）

システムが複数ある場合：
SYS: 販売管理システム
INV: 在庫管理システム
ORD: 注文管理システム

メッセージタイプ：
E: エラーメッセージ
W: 警告メッセージ
I: 情報メッセージ
C: 確認メッセージ
```

#### Step 2: メッセージ設計のパターン

```
【悪い例】
「エラーが発生しました」
「処理に失敗しました」
「不正な値です」

【良い例】
「商品コードは必須入力です」
「価格は数値で入力してください」
「在庫数が不足しています」
```

**改善の図解：**
```
悪い例：「エラーが発生しました」
  ↓ 改善のポイント
  ・何がエラーなのか不明
  ・どうすれば良いか分からない
  ・ユーザーが困る

良い例：「商品コードは必須入力です」
  ↓ 改善された点
  ・どの項目がエラーか明確
  ・何をすべきか分かる
  ・ユーザーが対処できる
```

#### Step 3: メッセージ作成のチェックリスト

```
✓ 具体的か？        「商品コードは」← 何の項目か明確
✓ 分かりやすいか？   「必須入力です」← 専門用語を避ける
✓ 対処法が分かるか？ 「入力してください」← 次のアクションを示す
✓ 敬語が統一されているか？ 「です・ます調」で統一
✓ 文字数は適切か？   スマホ画面でも読みやすい長さ
```

### 実践例：ECサイトの入力チェックメッセージ

```
画面項目とメッセージの対応図

【商品登録画面】
┌─────────────────────────────────────┐
│ 商品コード [_______] ← 必須項目      │
│ 商品名     [_______] ← 必須項目      │
│ 価格       [_______] ← 数値のみ      │
│ 在庫数     [_______] ← 数値のみ      │
│                                    │
│ [登録] [キャンセル]                │
└─────────────────────────────────────┘

対応するメッセージ定義：
┌─────────────────────────────────────────────────────┐
│ ID      │ メッセージ内容                              │
├─────────┼─────────────────────────────────────────────┤
│ SYSE001 │ 商品コードは必須入力です                    │
│ SYSE002 │ 商品名は必須入力です                        │
│ SYSE003 │ 価格は半角数字で入力してください            │
│ SYSE004 │ 在庫数は半角数字で入力してください          │
│ SYSI001 │ 商品情報を登録しました                      │
│ SYSW001 │ 登録内容を確認してください                  │
└─────────┴─────────────────────────────────────────────┘
```

## 3. コード定義書：システムの共通言語を作る

### コード定義書とは？

システムで使用するコード値とその意味を定義する設計書です。区分値、ステータス、フラグなどの分類データを管理します。

### コード体系の設計図

```
コード定義の階層構造

コードグループ（大分類）
├── 001：区分
│   ├── 1：有効
│   ├── 2：無効
│   └── 9：削除
├── 002：ステータス
│   ├── 10：受付
│   ├── 20：処理中
│   ├── 30：完了
│   └── 99：エラー
└── 003：カテゴリ
    ├── 01：家電
    ├── 02：書籍
    └── 03：服飾
```

### 作り方の基本ステップ

#### Step 1: コードグループの設計

```
【グループID設計のコツ】
001, 002, 003... (3桁の連番)

なぜ3桁？
・十分な種類を管理可能（999種類）
・ゼロ埋めで桁数統一
・将来の拡張に対応

【悪い例】
1, 2, 3... (桁数バラバラ)

【良い例】
001, 002, 003... (桁数統一)
```

#### Step 2: コード値の付け方パターン

```
パターン1：連番方式
┌─────────────────────────────────────┐
│ グループ │ コード │ 名称        │
├─────────┼─────────┼─────────────┤
│ 001     │ 1      │ 有効        │
│ 001     │ 2      │ 無効        │
│ 001     │ 3      │ 削除        │
└─────────┴─────────┴─────────────┘

パターン2：意味のある値方式
┌─────────────────────────────────────┐
│ グループ │ コード │ 名称        │
├─────────┼─────────┼─────────────┤
│ 001     │ A      │ 有効        │
│ 001     │ I      │ 無効        │
│ 001     │ D      │ 削除        │
└─────────┴─────────┴─────────────┘

パターン3：フロー順番方式
┌─────────────────────────────────────┐
│ グループ │ コード │ 名称        │
├─────────┼─────────┼─────────────┤
│ 002     │ 10     │ 受付        │
│ 002     │ 20     │ 処理中      │
│ 002     │ 30     │ 完了        │
│ 002     │ 99     │ エラー      │
└─────────┴─────────┴─────────────┘
```

#### Step 3: 拡張性を考慮した設計

```
【業務フローとコード設計】

注文処理の流れ：
受付 → 確認 → 承認 → 発送 → 完了

コード設計（拡張考慮）：
10：受付     ← 最初
20：確認     ← 追加可能な余地
30：承認     ← 追加可能な余地
40：発送     ← 追加可能な余地
50：完了     ← 最後
99：キャンセル ← 特別な状態

将来、「審査」工程が追加される場合：
25：審査     ← 確認と承認の間に追加可能
```

### 実践例：商品管理システムのコード設計

```
【商品カテゴリのコード設計】

グループ：003（商品カテゴリ）
┌─────────────────────────────────────────┐
│ コード │ 名称     │ 説明                │
├─────────┼─────────┼─────────────────────┤
│ 01     │ 家電     │ 家庭用電化製品      │
│ 02     │ 書籍     │ 本・雑誌・漫画      │
│ 03     │ 服飾     │ 衣類・靴・アクセサリ │
│ 04     │ 食品     │ 食べ物・飲み物      │
│ 05     │ 日用品   │ 生活用品・雑貨      │
│ 99     │ その他   │ 上記以外            │
└─────────┴─────────┴─────────────────────┘

設計のポイント：
・2桁の連番で管理
・業務的な並び順を考慮
・「その他」は99番で特別扱い
・将来の追加は06番から使用
```

## 4. 画面一覧：セキュリティの基盤を作る

### 画面一覧とは？

システムの全画面を一覧化し、各画面のアクセス権限を定義する設計書です。

### 権限設計の構造図

```
権限設計の階層構造

システム利用者
├── 管理者
│   ├── システム管理者（全権限）
│   └── 業務管理者（業務権限）
├── 一般利用者
│   ├── 営業担当者
│   ├── 経理担当者
│   └── 倉庫担当者
└── 外部利用者
    ├── 顧客
    └── 取引先
```

### 作り方の基本ステップ

#### Step 1: 画面IDの体系設計

```
【画面ID設計例】
G001：共通画面（ログイン、メニューなど）
G101：商品管理画面
G201：注文管理画面
G301：在庫管理画面
G901：システム管理画面

体系の説明：
G + 3桁番号
 ↑     ↑
画面  機能別の番号
     （100番台：商品関連）
     （200番台：注文関連）
     （300番台：在庫関連）
     （900番台：管理関連）
```

#### Step 2: 権限マトリックスの作成

```
権限マトリックス例

画面＼ユーザー │ 管理者 │ 営業 │ 経理 │ 倉庫 │ 顧客
──────────────┼──────┼──────┼──────┼──────┼──────
G001 ログイン  │   ○  │  ○  │  ○  │  ○  │  ○
G101 商品管理  │   ○  │  ○  │  ×  │  ×  │  ×
G201 注文管理  │   ○  │  ○  │  ○  │  ×  │  ×
G301 在庫管理  │   ○  │  ×  │  ×  │  ○  │  ×
G901 システム管理│   ○  │  ×  │  ×  │  ×  │  ×

凡例：
○：アクセス可能
×：アクセス不可
△：条件付きアクセス
```

#### Step 3: 最小権限の原則

```
最小権限の原則とは？

【悪い例】
全員に全ての権限を付与
↓
セキュリティリスクが高い
データの改ざん・削除の危険性

【良い例】
必要最小限の権限のみ付与
↓
セキュリティリスクを最小化
業務に必要な機能のみ利用可能

権限付与の判断基準：
1. その画面を使う業務があるか？
2. 機密情報にアクセスする必要があるか？
3. データを変更する必要があるか？
```

### 実践例：ECサイトの権限設計

```
【ECサイトの画面構成と権限】

画面構成図：
┌─────────────────────────────────────┐
│              トップページ           │
├─────────────────────────────────────┤
│ 商品一覧 │ 商品詳細 │ カート        │
├─────────┼─────────┼─────────────┤
│ 注文履歴 │ 会員情報 │ 管理画面      │
└─────────┴─────────┴─────────────┘

権限設計：
┌─────────────────────────────────────────────────────┐
│ 画面ID │ 画面名     │ 管理者│ 店員│ 会員│ 一般
├─────────┼─────────┼──────┼──────┼──────┼──────
│ G001   │ トップ     │  ○  │  ○  │  ○  │  ○
│ G101   │ 商品一覧   │  ○  │  ○  │  ○  │  ○
│ G102   │ 商品詳細   │  ○  │  ○  │  ○  │  ○
│ G201   │ カート     │  ○  │  ○  │  ○  │  ×
│ G301   │ 注文履歴   │  ○  │  ○  │  ○  │  ×
│ G302   │ 会員情報   │  ○  │  ×  │  ○  │  ×
│ G901   │ 管理画面   │  ○  │  ×  │  ×  │  ×
└─────────┴─────────┴──────┴──────┴──────┴──────┘

設計のポイント：
・誰でも見られる画面（商品情報）
・会員限定の画面（カート、注文履歴）
・管理者専用の画面（管理機能）
```

## 設計書作成の全般的なコツ

### 1. 命名規則の統一

```
【統一する要素】
テーブル名：m01_product, m02_category
カラム名：product_cd, category_cd
メッセージID：SYSE001, SYSE002
画面ID：G001, G101

【統一のメリット】
・開発者が理解しやすい
・メンテナンスが楽
・バグの発生を減らせる
```

### 2. 将来の拡張性を考慮

```
【拡張性の考慮例】

ID体系の設計：
001, 002, 003... → 010, 020, 030...
（間に追加可能）

テーブル設計：
最初：product_cd, product_name
拡張：product_cd, product_name, category_cd, description
（カラム追加可能）

コード設計：
10, 20, 30... → 15を後から追加可能
（ステータスの間に新しい状態を追加）
```

### 3. 一貫性を保つ

```
【一貫性チェックリスト】
□ 用語の統一（「削除」「除去」→「削除」に統一）
□ 表記方法の統一（「ユーザID」「ユーザーID」→統一）
□ データ型の統一（文字列は基本VARCHAR）
□ 権限の統一（同じ役割なら同じ権限）
□ フォーマットの統一（日付形式など）
```

### 4. レビューのポイント

```
【レビュー観点】

機能性チェック：
□ 業務要件を満たしているか？
□ 必要な項目が網羅されているか？

設計品質チェック：
□ 命名規則に従っているか？
□ データ型は適切か？
□ 権限設計は適切か？

保守性チェック：
□ 将来の拡張に対応できるか？
□ 他システムとの整合性はあるか？
```

### 5. 更新履歴の管理

```
【更新履歴の例】
┌─────────────────────────────────────────────────────┐
│ 更新日   │ 更新者 │ 更新内容                          │
├─────────┼─────────┼─────────────────────────────────┤
│ 2024/01/15│ 田中   │ 初版作成                          │
│ 2024/02/01│ 佐藤   │ 商品カテゴリ項目追加              │
│ 2024/02/15│ 田中   │ 削除フラグ追加                    │
└─────────┴─────────┴─────────────────────────────────┘

記録すべき情報：
・いつ変更したか
・誰が変更したか
・何を変更したか
・なぜ変更したか
```

## まとめ

設計書は一度作って終わりではなく、システムの成長と共に育てていくものです。最初は完璧でなくても、継続的に改善していくことが大切です。

**新人エンジニアの皆さんへのアドバイス：**

```
成長のステップ

Step 1：基本を覚える
├─ 設計書の構成を理解
├─ 命名規則を覚える
└─ 基本的な設計パターンを学ぶ

Step 2：実践で経験を積む
├─ 小さな機能から設計してみる
├─ 先輩のレビューを受ける
└─ 改善点を次に活かす

Step 3：品質を向上させる
├─ 拡張性を考慮した設計
├─ 保守性の高い設計
└─ チーム全体の品質向上に貢献
```

**重要なポイント：**

1. **完璧を目指さず、まずは作ってみる**
2. **先輩エンジニアの設計書を参考にする**
3. **業務担当者としっかりコミュニケーションを取る**
4. **小さな改善を積み重ねる**
5. **なぜその設計にしたのか理由を明確にする**

良い設計書は、開発効率を向上させ、保守性の高いシステムを作る基盤になります。最初は時間がかかりますが、経験を積むことで自然と品質の高い設計書が書けるようになります。

頑張ってください！
