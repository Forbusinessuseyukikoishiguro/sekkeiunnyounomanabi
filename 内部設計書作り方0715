内部設計書の作り方を具体的に解説します。

## 1. 準備段階

### 必要な情報を集める
- **要件定義書**: 何を作るかの仕様
- **外部設計書**: 画面設計、API仕様など
- **システム構成図**: 全体のアーキテクチャ
- **データベース設計**: テーブル定義

## 2. 基本構成の作成

### テンプレートの構成例
```
【プログラム処理一覧】
No. | 機能カテゴリ | 画面ID | モジュール名 | 関数名 | 処理内容
```

### 項目の定義
- **No.**: 通し番号（管理用）
- **機能カテゴリ**: 大分類（login, user, order など）
- **画面ID**: 画面識別子（G01, G02 など）
- **モジュール名**: ファイル名やクラス名
- **関数名**: メソッド名
- **処理内容**: 具体的な処理の説明

## 3. 実際の作成手順

### Step 1: 機能の洗い出し
```
例：ECサイトのログイン機能
- ユーザー認証
- セッション管理
- エラーハンドリング
- 画面遷移
```

### Step 2: 画面・モジュールの整理
```
L01: ログイン画面
├── LoginPage.vue (メイン画面)
├── LoginForm.vue (フォーム部品)
└── AuthService.js (認証処理)
```

### Step 3: 関数レベルの詳細化
```
No. | 機能 | 画面ID | モジュール | 関数名 | 処理内容
1 | login | L01 | LoginPage.vue | validateInput | 入力値の妥当性チェック
2 | login | L01 | LoginPage.vue | submitLogin | ログイン処理の実行
3 | login | L01 | AuthService.js | authenticate | サーバー認証API呼び出し
```

## 4. 処理内容の書き方

### 良い例
```
❌ 悪い例: "データを保存する"
✅ 良い例: "ユーザー入力した見積条件をlocalStorageに保存し、次画面で参照できるようにする"
```

### 詳細レベルの目安
- **入力**: 何のデータを受け取るか
- **処理**: 具体的に何をするか
- **出力**: 何を返すか、どこに保存するか
- **例外**: エラー時の処理

## 5. 実践例## 6. 作成時の注意点

### 実装者目線で書く
- **具体的に**: 「データ処理」ではなく「ユーザー入力をJSON形式でAPIに送信」
- **順序を明確に**: 処理の流れが分かるように番号を振る
- **例外処理**: 正常系だけでなく、エラー時の処理も記述

### 保守性を考慮
- **命名規則**: 関数名、変数名のルールを統一
- **更新しやすさ**: 仕様変更時に修正箇所が分かりやすく
- **トレーサビリティ**: 要件から実装まで追跡可能に

### チームで共有
- **レビュー**: 実装前に設計書をレビュー
- **質問しやすさ**: 不明点を質問できる環境作り
- **バージョン管理**: 変更履歴を残す

## 7. よくある失敗とその対策

### 失敗例1: 抽象的すぎる
```
❌ 「ログイン処理」
✅ 「入力されたID/パスワードをPOST /api/auth/loginに送信し、レスポンスのトークンをlocalStorageに保存」
```

### 失敗例2: 実装詳細が不足
```
❌ 「エラー処理」
✅ 「バリデーションエラー時は該当フィールドの下に赤文字でメッセージ表示、システムエラー時はエラーページに遷移」
```

内部設計書は「実装の設計図」です。この文書を見れば、他のエンジニアがコードを書けるレベルまで詳細に記述することが重要です。
