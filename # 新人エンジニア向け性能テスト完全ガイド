# 新人エンジニア向け性能テスト完全ガイド

## はじめに

性能テストは、システムが要求される性能を満たしているかを確認するための重要なテスト工程です。ユーザーが快適にシステムを利用できるかどうかは、性能テストの結果に大きく左右されます。

本ガイドでは、新人エンジニアの皆さんが性能テストの基本概念から実践的な実施方法まで、体系的に理解できるよう詳しく解説します。

---

## 1. 性能テストとは

### 1.1 性能テストの定義

性能テストとは、システムが規定された条件下で、期待される性能要件を満たしているかを検証するテストです。単に「動作する」だけでなく、「どれだけ速く、安定して動作するか」を測定・評価します。

### 1.2 性能テストの重要性

**ビジネスへの影響**：
- ユーザー体験の向上
- 顧客満足度の向上
- システム障害の予防
- 運用コストの最適化
- 競争優位性の確保

**技術的な意義**：
- システムの限界値把握
- ボトルネックの特定
- スケーラビリティの確認
- リソース使用量の最適化

### 1.3 性能テストで測定する主要指標

#### レスポンス時間（Response Time）
ユーザーがリクエストを送信してから、レスポンスを受信するまでの時間

**種類**：
- **平均レスポンス時間**: 全リクエストの平均時間
- **90%タイルレスポンス時間**: 90%のリクエストがこの時間以内に完了
- **95%タイルレスポンス時間**: 95%のリクエストがこの時間以内に完了
- **最大レスポンス時間**: 最も遅いリクエストの時間

#### スループット（Throughput）
単位時間あたりに処理できるリクエスト数

**測定単位**：
- TPS（Transaction Per Second）: 1秒あたりのトランザクション数
- RPS（Request Per Second）: 1秒あたりのリクエスト数
- QPM（Query Per Minute）: 1分あたりのクエリ数

#### リソース使用率（Resource Utilization）
システムリソースの使用状況

**主要な監視項目**：
- **CPU使用率**: プロセッサの使用率
- **メモリ使用率**: RAM の使用率
- **ディスクI/O**: ストレージの読み書き性能
- **ネットワークI/O**: ネットワーク帯域の使用状況

#### 同時接続数（Concurrent Users）
システムに同時にアクセスしているユーザー数

#### エラー率（Error Rate）
全リクエストに対するエラーが発生したリクエストの割合

---

## 2. 性能テストの種類

### 2.1 基礎テスト（Baseline Test）

#### 目的
システムの基本的な性能特性を把握し、他のテストの基準となるベースラインを確立する

#### 特徴
- **低負荷での実施**: 最小限のユーザー数でテスト
- **基準値の設定**: 今後の性能テストの比較基準
- **システムの基本動作確認**: 基本機能が正常に動作するかを確認

#### 実施方法
```
【基礎テストの条件】
・同時ユーザー数: 1～5ユーザー
・実施時間: 30分～1時間
・テストシナリオ: 主要な業務シナリオ
・環境: 本番相当の環境

【測定項目】
・各機能のレスポンス時間
・システムリソースの基本使用量
・エラーの有無
・メモリリークの確認
```

#### 実施例
```
【Webアプリケーションの基礎テスト】
1. ログイン処理のレスポンス時間測定
2. 検索機能の基本性能測定
3. データ登録処理の性能測定
4. 帳票出力処理の性能測定
5. ログアウト処理の確認

期待結果:
・ログイン: 2秒以内
・検索: 3秒以内
・データ登録: 5秒以内
・帳票出力: 10秒以内
```

### 2.2 負荷テスト（Load Test）

#### 目的
通常運用時に想定される負荷をかけて、システムが要求される性能を満たすかを確認する

#### 特徴
- **想定される最大負荷**: 日常的に想定される最大のユーザー数
- **持続的な負荷**: 一定期間継続してテストを実施
- **性能要件の検証**: 定義された性能要件を満たすかを確認

#### 負荷設定の考え方
```
【負荷設定の例】
・ECサイトの場合
  - 平常時: 100同時ユーザー
  - ピーク時: 500同時ユーザー
  - セール時: 1,000同時ユーザー

・社内システムの場合
  - 朝の業務開始時: 200同時ユーザー
  - 昼休み明け: 150同時ユーザー
  - 月末処理: 300同時ユーザー
```

#### 実施方法
```
【負荷テストの手順】
1. テストシナリオの準備
2. 段階的な負荷増加
   - 10ユーザー → 50ユーザー → 100ユーザー
3. 目標負荷での持続テスト（30分以上）
4. 性能指標の測定・記録
5. システムリソースの監視

【負荷増加パターン】
・段階的増加: 10分毎に負荷を段階的に増加
・一気に増加: 短時間で目標負荷に到達
・波形パターン: 負荷の増減を繰り返す
```

#### 判定基準
```
【合格基準の例】
・レスポンス時間: 95%のリクエストが5秒以内
・エラー率: 1%以下
・CPU使用率: 80%以下
・メモリ使用率: 85%以下
・スループット: 最低100TPS
```

### 2.3 耐久テスト（Endurance Test/Stress Test）

#### 目的
長時間の連続運用や高負荷状態でのシステムの安定性を確認する

#### 特徴
- **長時間の継続実行**: 数時間～数日間の継続テスト
- **安定性の確認**: メモリリーク、リソース枯渇の検出
- **限界点の把握**: システムが破綻する負荷レベルの特定

#### 耐久テストの種類

##### 耐久テスト（Endurance Test）
```
【目的】
長時間運用でのシステム安定性確認

【実施条件】
・負荷: 通常運用の70-80%レベル
・期間: 8時間～48時間
・監視項目: メモリ使用量、CPU使用率、レスポンス時間

【検出対象】
・メモリリーク
・ファイルハンドルリーク
・データベース接続リーク
・性能劣化
```

##### ストレステスト（Stress Test）
```
【目的】
システムの限界点と破綻時の挙動確認

【実施条件】
・負荷: 想定最大負荷の150-200%
・期間: 負荷増加は段階的、破綻まで継続
・監視項目: システムの応答性、エラー発生状況

【検出対象】
・システムの限界値
・破綻時の挙動（graceful degradation）
・復旧可能性
・データ整合性
```

##### スパイクテスト（Spike Test）
```
【目的】
急激な負荷増加に対するシステムの対応能力確認

【実施条件】
・負荷: 短時間で急激に増加（10倍～100倍）
・期間: 数分～数十分
・パターン: 急上昇・急降下

【検出対象】
・オートスケーリングの動作
・キャッシュの効果
・負荷分散の効果
・システムの復旧時間
```

---

## 3. 性能テスト計画の立て方

### 3.1 テスト計画の基本構成

#### 3.1.1 テスト目的の明確化

**記載内容**：
```
【性能テストの目的】
本性能テストは、○○システムが以下の性能要件を満たすことを確認する：

1. レスポンス性能の検証
   - ログイン処理: 3秒以内
   - 検索処理: 5秒以内
   - データ更新: 2秒以内

2. スループット性能の検証
   - 最低100TPS の処理能力
   - 同時接続ユーザー数500名まで対応

3. 安定性の検証
   - 8時間の連続稼働でメモリリークなし
   - CPU使用率80%以下での安定動作

4. 限界性能の把握
   - システムの限界負荷の特定
   - ボトルネックとなる箇所の特定
```

#### 3.1.2 テスト対象の定義

**対象範囲の明確化**：
```
【テスト対象システム】
■対象
・Webアプリケーション（フロントエンド）
・APIサーバー（バックエンド）
・データベースサーバー
・ファイルサーバー

■対象外
・外部連携システム（モック使用）
・バッチ処理システム
・管理者向け機能
```

**テスト対象機能**：
```
【対象機能】
優先度A（必須）:
・ユーザー認証（ログイン・ログアウト）
・商品検索・一覧表示
・商品詳細表示
・カート操作（追加・削除・変更）
・注文処理

優先度B（重要）:
・ユーザー登録・変更
・注文履歴表示
・お気に入り機能

優先度C（通常）:
・レビュー投稿・表示
・問い合わせ機能
```

#### 3.1.3 性能要件の設定

**性能要件の定義方法**：
```
【性能要件】
■レスポンス時間要件
・ログイン: 平均2秒、95%タイル3秒以内
・商品検索: 平均3秒、95%タイル5秒以内
・注文処理: 平均5秒、95%タイル8秒以内

■スループット要件
・最大同時ユーザー数: 500ユーザー
・最大TPS: 100トランザクション/秒
・1日の最大処理件数: 10,000件

■リソース使用量要件
・CPU使用率: 平均60%以下、最大80%以下
・メモリ使用率: 平均70%以下、最大85%以下
・ディスクI/O: 読み込み80MB/s、書き込み40MB/s以下

■可用性要件
・システム稼働率: 99.9%以上
・MTTR（平均復旧時間）: 30分以内
・MTBF（平均故障間隔）: 720時間以上
```

### 3.2 テストシナリオの設計

#### 3.2.1 ユーザーシナリオの作成

**典型的なECサイトのシナリオ**：
```
【シナリオ1: 商品購入（新規ユーザー）】
1. トップページアクセス (5秒待機)
2. 商品検索実行 (3秒待機)
3. 検索結果一覧表示 (2秒待機)
4. 商品詳細ページ表示 (10秒待機)
5. カートに追加 (2秒待機)
6. ユーザー登録画面へ (3秒待機)
7. ユーザー情報入力・登録 (30秒待機)
8. 注文情報入力 (20秒待機)
9. 注文確定 (5秒待機)
10. 注文完了ページ表示 (3秒待機)

総所要時間: 約88秒
```

**シナリオの重み付け**：
```
【シナリオ配分】
・商品閲覧のみ: 40%
・商品購入（既存ユーザー）: 35%
・商品購入（新規ユーザー）: 15%
・ユーザー情報変更: 5%
・問い合わせ・その他: 5%
```

#### 3.2.2 負荷パターンの設計

**段階的負荷増加パターン**：
```
【負荷増加パターン】
時間  | ユーザー数 | 目的
------|-----------|--------
0-10分  | 10       | システム動作確認
10-20分 | 50       | 基本負荷での安定性確認
20-30分 | 100      | 通常負荷での性能確認
30-40分 | 200      | 高負荷での性能確認
40-50分 | 300      | ピーク負荷での限界確認
50-60分 | 500      | 最大負荷での動作確認
```

**実際の運用パターンを模擬**：
```
【1日の負荷変動パターン】
9:00-10:00  | 50ユーザー  | 業務開始
10:00-12:00 | 150ユーザー | 午前の業務
12:00-13:00 | 80ユーザー  | 昼休み
13:00-15:00 | 200ユーザー | 午後の業務
15:00-17:00 | 180ユーザー | 夕方の業務
17:00-18:00 | 100ユーザー | 業務終了
```

### 3.3 テスト環境の準備

#### 3.3.1 環境要件の定義

**本番環境との対比**：
```
【環境仕様対比】
           | 本番環境    | テスト環境  | 備考
-----------|------------|------------|--------
Webサーバー | 4台        | 2台        | 50%規模
DBサーバー  | 2台(冗長化) | 1台        | 単体構成
CPU        | 8コア      | 4コア      | 50%性能
メモリ     | 32GB       | 16GB       | 50%容量
ストレージ | SSD 1TB    | SSD 500GB  | 50%容量
```

**性能補正の考慮**：
```
【性能補正計算】
テスト環境の性能 = 本番環境の50%
⇒ テスト結果 × 2 = 本番予想性能

例）テスト環境で50TPS
⇒ 本番環境では100TPS の性能が期待される
```

#### 3.3.2 監視ツールの設定

**APM（Application Performance Monitoring）ツール**：
- New Relic
- AppDynamics
- Dynatrace
- 社内監視ツール

**システム監視項目**：
```
【サーバー監視項目】
・CPU使用率（全体、プロセス別）
・メモリ使用率（物理、仮想）
・ディスクI/O（読み書き速度、使用率）
・ネットワークI/O（帯域使用率、パケット数）
・プロセス数、スレッド数
・ファイルディスクリプタ数

【アプリケーション監視項目】
・レスポンス時間（API別、画面別）
・スループット（リクエスト/秒）
・エラー率（HTTP エラー、アプリエラー）
・セッション数、接続数
・キューの長さ、待ち時間

【データベース監視項目】
・クエリレスポンス時間
・スロークエリの発生状況
・接続数、アクティブセッション数
・テーブルロック、デッドロックの発生
・インデックス使用状況
```

---

## 4. 性能テストの実施方法

### 4.1 テスト実行の準備

#### 4.1.1 事前チェック項目

**環境確認チェックリスト**：
```
【インフラ確認】
□ サーバーリソースの確認（CPU、メモリ、ディスク）
□ ネットワーク帯域の確認
□ 監視ツールの動作確認
□ ログ出力設定の確認
□ バックアップの取得

【アプリケーション確認】
□ アプリケーションの正常起動
□ 基本機能の動作確認
□ データベース接続の確認
□ 外部システム連携の確認（モック含む）
□ ログレベルの設定（本番レベルに変更）

【テストデータ確認】
□ テストデータの投入完了
□ データ量の確認（本番相当量）
□ ユーザーアカウントの準備
□ 商品マスタ等の基本データ確認
```

#### 4.1.2 テストツールの準備

**主要な性能テストツール**：

**JMeter（Apache JMeter）**：
```
【特徴】
・オープンソースで無料
・GUI とコマンドライン両対応
・Webアプリケーションテストに適している
・プラグインが豊富

【基本的な使用手順】
1. テストプランの作成
2. スレッドグループの設定（ユーザー数、実行時間）
3. HTTPリクエストサンプラーの設定
4. 結果表示リスナーの設定
5. テスト実行
6. 結果分析
```

**LoadRunner（Micro Focus）**：
```
【特徴】
・商用ツール（高機能・高価格）
・大規模負荷テストに適している
・詳細な分析機能
・企業での利用実績が豊富

【主要コンポーネント】
・VuGen: スクリプト作成
・Controller: テスト実行制御
・Analysis: 結果分析
```

**Gatling**：
```
【特徴】
・Scala ベースの高性能ツール
・軽量で高スループット
・リアルタイムな結果表示
・美しいHTMLレポート

【適用場面】
・高負荷テスト
・継続的パフォーマンステスト
・API テスト
```

### 4.2 段階的テスト実行

#### 4.2.1 基礎テストの実行

**実行手順**：
```
【Step 1: スモークテスト】
目的: 基本動作の確認
条件: 1ユーザー、主要機能の実行
時間: 30分
確認: エラーの有無、基本レスポンス時間

【Step 2: ベースライン測定】
目的: 基準値の取得
条件: 5ユーザー、全機能の実行
時間: 1時間
測定: 各機能のレスポンス時間、リソース使用量

【結果例】
機能名       | レスポンス時間 | CPU使用率 | メモリ使用率
-------------|---------------|-----------|-------------
ログイン     | 1.2秒         | 15%       | 25%
商品検索     | 2.1秒         | 25%       | 30%
商品詳細     | 0.8秒         | 10%       | 25%
カート追加   | 0.5秒         | 12%       | 26%
注文処理     | 3.2秒         | 35%       | 40%
```

#### 4.2.2 負荷テストの実行

**段階的負荷増加**：
```
【Phase 1: 軽負荷テスト】
・ユーザー数: 10 → 50
・実行時間: 各20分
・目的: 基本的な負荷耐性確認

【Phase 2: 通常負荷テスト】
・ユーザー数: 100 → 200
・実行時間: 各30分
・目的: 通常運用負荷での性能確認

【Phase 3: 高負荷テスト】
・ユーザー数: 300 → 500
・実行時間: 各30分
・目的: ピーク時負荷での性能確認

【各フェーズでの監視項目】
・レスポンス時間の変化
・エラー率の推移
・スループットの変化
・リソース使用率の推移
・システムの安定性
```

#### 4.2.3 耐久テストの実行

**長時間テストの設計**：
```
【8時間耐久テスト】
時間帯      | 負荷レベル | 目的
-----------|------------|--------
0-2時間    | 100ユーザー | 初期安定性確認
2-4時間    | 150ユーザー | 中負荷での持続性確認
4-6時間    | 200ユーザー | 高負荷での持続性確認
6-8時間    | 100ユーザー | 負荷軽減時の回復確認

【監視項目】
・メモリ使用量の推移（リーク検出）
・レスポンス時間の劣化
・エラー率の変化
・リソース使用率の安定性
・ガベージコレクションの状況
```

### 4.3 結果の取得と分析

#### 4.3.1 データ収集

**自動収集データ**：
```
【テストツールからの収集データ】
・リクエスト毎のレスポンス時間
・成功/失敗の結果
・スループット（TPS、RPS）
・エラーの詳細情報
・タイムスタンプ付きログ

【システム監視からの収集データ】
・CPU使用率（1分毎）
・メモリ使用率（1分毎）
・ディスクI/O使用率（1分毎）
・ネットワークI/O使用率（1分毎）
・プロセス・スレッド数
・データベース性能情報
```

**手動確認項目**：
```
【アプリケーションログ確認】
・エラーログの内容
・警告メッセージの発生状況
・スロークエリの発生状況
・例外発生の詳細

【システムログ確認】
・OSレベルのエラー
・メモリ不足の警告
・ディスク容量の警告
・ネットワークエラー
```

#### 4.3.2 結果分析の方法

**レスポンス時間分析**：
```
【分析観点】
1. 平均値の推移
   ・負荷増加に伴う変化
   ・時間経過による劣化

2. パーセンタイル分析
   ・90%、95%、99%タイルの値
   ・外れ値の影響度

3. 機能別分析
   ・処理の重い機能の特定
   ・改善優先度の決定

【分析例】
負荷レベル | 平均時間 | 90%タイル | 95%タイル | 最大時間
----------|----------|-----------|-----------|----------
10ユーザー | 1.2秒    | 2.1秒     | 2.8秒     | 4.2秒
50ユーザー | 1.8秒    | 3.2秒     | 4.1秒     | 7.8秒
100ユーザー| 2.5秒    | 4.8秒     | 6.2秒     | 12.1秒
200ユーザー| 4.2秒    | 8.1秒     | 11.5秒    | 25.3秒 ←要改善
```

**スループット分析**：
```
【スループットの評価】
1. 最大スループットの特定
2. 負荷増加に対するスループットの変化
3. 飽和点の特定

【分析結果例】
ユーザー数 | TPS | 判定
----------|-----|------
10        | 45  | 良好
50        | 85  | 良好
100       | 95  | 良好
200       | 98  | 飽和気味
300       | 95  | 性能劣化 ←ボトルネック発生
```

**リソース使用率分析**：
```
【ボトルネック特定】
1. CPU使用率
   ・80%超過: CPU ボトルネック
   ・アプリケーション最適化が必要

2. メモリ使用率
   ・85%超過: メモリ不足
   ・メモリリークの可能性

3. ディスクI/O
   ・継続的な高使用率: ディスクボトルネック
   ・インデックス最適化が必要

4. ネットワークI/O
   ・帯域使用率90%超過: ネットワークボトルネック
```

---

## 5. 完了基準と判定方法

### 5.1 合格基準の設定

#### 5.1.1 定量的基準

**レスポンス時間基準**：
```
【基準設定例】
機能分類        | 平均時間 | 95%タイル | 最大許容時間
---------------|----------|-----------|-------------
ログイン・認証  | 2秒以内  | 3秒以内   | 5秒以内
一覧・検索     | 3秒以内  | 5秒以内   | 8秒以内
詳細表示       | 1秒以内  | 2秒以内   | 3秒以内
データ更新     | 2秒以内  | 4秒以内   | 6秒以内
帳票出力       | 10秒以内 | 15秒以内  | 20秒以内
ファイルアップロード | 5秒以内 | 8秒以内 | 12秒以内
```

**スループット基準**：
```
【スループット要件】
・最低保証TPS: 80 TPS
・目標TPS: 100 TPS
・最大同時ユーザー数: 500ユーザー
・1日最大処理件数: 50,000件
```

**リソース使用率基準**：
```
【リソース使用率上限】
・CPU使用率: 平均70%以下、最大80%以下
・メモリ使用率: 平均75%以下、最大85%以下
・ディスクI/O使用率: 80%以下
・ネットワーク帯域使用率: 70%以下
```

**エラー率基準**：
```
【エラー率上限】
・システムエラー:
