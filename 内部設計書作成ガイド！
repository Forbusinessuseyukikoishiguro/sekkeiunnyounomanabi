# 新人エンジニア向け内部設計書完全ガイド

## はじめに

内部設計書は、システム開発において「実装の設計図」として機能する重要な技術文書です。この記事では、新人エンジニアが内部設計書を理解し、作成できるようになることを目指します。

## 1. 内部設計書とは何か

### 1.1 定義と目的

内部設計書は、システムの内部構造や処理の詳細を記述した技術文書です。主な目的は以下の通りです：

- **実装指針の提供**: プログラマーが具体的にコードを書くための詳細な設計
- **品質の担保**: 設計レビューを通じて実装前にバグを防止
- **保守性の向上**: 後から見ても処理内容が理解できる文書化
- **チーム連携**: 複数人での開発における共通理解の促進

### 1.2 外部設計書との違い

| 項目 | 外部設計書 | 内部設計書 |
|------|-----------|-----------|
| **対象読者** | 顧客、PM、営業 | 開発者、テスター |
| **記述内容** | 画面仕様、API仕様 | 関数レベルの処理詳細 |
| **抽象度** | What（何を作るか） | How（どう作るか） |
| **例** | 「ログインボタンを押すとホーム画面に遷移」 | 「validateLogin()関数でID/PWをチェック後、/api/auth/loginにPOST送信」 |

## 2. 内部設計書の読み方

実際の例を使って読み方を学びましょう。

### 2.1 全体構造の把握

まずは文書の全体像を理解します：

```
機能カテゴリ: simulation（シミュレーション機能）
画面ID: G01（シミュレーション画面）
モジュール: G01SimulationPage.vue（Vue.jsコンポーネント）
```

### 2.2 関数レベルの理解

各関数の役割を順番に見ていきます：

**例：関数の読み方**
```
No.9 setDevices: 申込手続きに使用されている端末情報(SP/PC)を設定する
→ スマートフォンかPCかを判定して、適切な画面レイアウトを設定する処理
```

**例：処理フローの追跡**
```
1. initData() → データの初期化
2. selectDefaultProduct() → デフォルト商品の設定
3. validateInput() → 入力値チェック
4. clickNext() → 次画面への遷移
```

### 2.3 読み方のコツ

#### 段階的理解のアプローチ
1. **全体把握**: どんな機能の設計書か概要を理解
2. **主要処理**: メインとなる処理フローを把握
3. **詳細理解**: 各関数の具体的な処理内容を理解
4. **例外処理**: エラーハンドリングや特殊ケースを確認

#### 実装との照合
設計書を読みながら、実際のコードと照らし合わせることで理解が深まります：

```javascript
// 設計書: setDevices - 端末情報(SP/PC)を設定する
function setDevices() {
  const userAgent = navigator.userAgent;
  this.isMobile = /iPhone|iPad|Android/.test(userAgent);
  this.deviceType = this.isMobile ? 'SP' : 'PC';
}
```

## 3. 内部設計書の作り方

### 3.1 準備段階

#### 必要な情報の収集
作成前に以下の資料を準備します：

- **要件定義書**: システムに求められる機能や制約
- **外部設計書**: 画面設計、API仕様、データベース設計
- **システム構成図**: アーキテクチャ全体の把握
- **開発標準**: コーディング規約、命名規則

#### 作成方針の決定
- **詳細レベル**: どこまで詳しく書くか
- **対象読者**: 主に誰が読むか（新人〜ベテラン）
- **更新頻度**: どのタイミングで更新するか

### 3.2 基本構成の設計

#### 必須項目の定義
```
【基本構成】
- No.: 管理用の通し番号
- 機能カテゴリ: 大分類（login, user, order等）
- 画面ID: 画面識別子（G01, G02等）
- モジュール名: ファイル名やクラス名
- 関数名: メソッド名
- 処理内容: 具体的な処理の説明
```

#### テンプレートの作成
統一された書式で品質を保ちます：

| No. | 機能カテゴリ | 画面ID | モジュール名 | 関数名 | 処理内容 |
|-----|-------------|---------|-------------|---------|----------|
| 1 | [機能名] | [画面ID] | [ファイル名] | [関数名] | [詳細な処理内容] |

### 3.3 実際の作成手順

#### Step 1: 機能の洗い出し
システム全体の機能を大分類から小分類まで整理します。

**例：ECサイトのユーザー管理機能**
```
大分類: ユーザー管理
├── 中分類: 会員登録
│   ├── 入力値バリデーション
│   ├── 重複チェック
│   ├── パスワード暗号化
│   └── DB登録
├── 中分類: ログイン
│   ├── 認証処理
│   ├── セッション管理
│   └── 権限チェック
└── 中分類: プロフィール編集
    ├── 現在データ取得
    ├── 変更処理
    └── 更新通知
```

#### Step 2: 画面・モジュールの整理
機能をファイル単位で整理します。

**例：ファイル構成**
```
src/
├── pages/
│   ├── UserRegistration.vue     # 会員登録画面
│   ├── UserLogin.vue           # ログイン画面
│   └── UserProfile.vue         # プロフィール編集画面
├── services/
│   ├── AuthService.js          # 認証関連処理
│   └── UserService.js          # ユーザー情報処理
└── utils/
    ├── Validator.js            # バリデーション処理
    └── Crypto.js               # 暗号化処理
```

#### Step 3: 関数レベルの詳細化
各ファイル内の関数を設計書に落とし込みます。

### 3.4 処理内容の書き方

#### 良い処理内容の書き方
具体性と分かりやすさを重視します：

**❌ 悪い例**
```
"データを保存する"
"エラー処理をする"
"画面を表示する"
```

**✅ 良い例**
```
"ユーザーが入力したメールアドレス、パスワード、氏名をJSONオブジェクトに変換し、POST /api/users/register に送信してユーザー情報をDBに保存する"

"入力値が空文字の場合は「必須項目です」、メールアドレス形式が不正な場合は「正しいメールアドレスを入力してください」をフィールド下に赤文字で表示する"

"ユーザー登録成功時は「登録が完了しました」メッセージを3秒間表示後、ログイン画面（/login）に自動遷移する"
```

#### 処理内容の記述レベル
以下の要素を含めることで、実装者が迷わない設計書になります：

**入力（Input）**
- 何のデータを受け取るか
- データの形式や制約

**処理（Process）**
- 具体的に何をするか
- 使用するライブラリやAPI
- 計算ロジックやビジネスルール

**出力（Output）**
- 何を返すか
- どこに保存するか
- 画面上の変化

**例外処理（Exception）**
- エラー時の処理
- バリデーション失敗時の動作

### 3.5 実践的な作成例

実際のユーザー登録機能を例に、詳細な設計書を作成してみましょう：

## 4. 品質の高い内部設計書の特徴

### 4.1 実装者目線での具体性

**具体的な API 呼び出し**
```
❌ 抽象的: "サーバーと通信する"
✅ 具体的: "POST /api/users/register にJSON形式でユーザー情報を送信し、レスポンスのuserIdを受け取る"
```

**明確なデータ形式**
```javascript
// リクエストデータ
{
  "email": "user@example.com",
  "password": "hashed_password", 
  "name": "田中太郎",
  "birthDate": "1990-01-01"
}

// レスポンスデータ
{
  "userId": 12345,
  "message": "登録完了",
  "status": "success"
}
```

### 4.2 保守性を考慮した設計

**命名規則の統一**
- 関数名: キャメルケース（validateEmail, submitRegistration）
- 定数名: スネークケース（MAX_RETRY_COUNT, API_ENDPOINT）
- 画面ID: 英数字3桁（G01, U02, O05）

**変更に強い構造**
- 設定値は定数化して一箇所で管理
- 共通処理は別関数に切り出し
- API エンドポイントは環境別に設定可能

### 4.3 チーム開発での連携

**レビューしやすい構成**
- 処理の意図が明確
- 前提条件と結果が分かる
- 他の機能への影響範囲が明記

**質問しやすい文書**
- 専門用語には説明を併記
- 複雑な処理にはフローチャートを添付
- 参考資料へのリンクを記載

## 5. 設計書テンプレート集

### 5.1 基本テンプレート

```markdown
# [機能名] 内部設計書

## 1. 概要
- 機能概要: [機能の目的と概要]
- 対象画面: [関連する画面]
- 前提条件: [実行に必要な条件]

## 2. プログラム処理一覧
| No. | 機能カテゴリ | 画面ID | モジュール名 | 関数名 | 処理内容 |
|-----|-------------|---------|-------------|---------|----------|

## 3. 詳細仕様
### 3.1 [関数名]
- 入力: [パラメータの詳細]
- 処理: [処理内容の詳細]
- 出力: [戻り値の詳細]
- 例外: [エラー処理の詳細]

## 4. データ仕様
### 4.1 API仕様
### 4.2 データベース更新

## 5. エラーハンドリング
### 5.1 バリデーションエラー
### 5.2 システムエラー

## 6. 画面遷移
### 6.1 正常フロー
### 6.2 異常フロー
```

### 5.2 Web アプリケーション用テンプレート

```markdown
# Web アプリケーション内部設計書

## 1. 画面仕様
- 画面ID: [例: U01]
- 画面名: [例: ユーザー登録画面]
- URL: [例: /user/register]

## 2. コンポーネント構成
- メインコンポーネント: [例: UserRegistration.vue]
- 子コンポーネント: [例: InputForm.vue, ConfirmDialog.vue]
- 使用サービス: [例: UserService.js, ValidationService.js]

## 3. 状態管理
- ローカル状態: [Vue の data()]
- グローバル状態: [Vuex store]
- 永続化: [localStorage, sessionStorage]

## 4. イベント処理
| イベント | トリガー | 処理関数 | 処理内容 |
|----------|----------|----------|----------|

## 5. API 連携
| API | メソッド | エンドポイント | リクエスト | レスポンス |
|-----|----------|----------------|------------|------------|

## 6. バリデーション仕様
| 項目 | 必須 | 形式 | 文字数 | エラーメッセージ |
|------|------|------|--------|------------------|
```

## 6. よくある失敗パターンとその対策

### 6.1 失敗パターン1: 抽象的すぎる記述

**問題点**
```
❌ 「ログイン処理を行う」
❌ 「データをチェックする」
❌ 「エラーを表示する」
```

**対策**
```
✅ 「入力されたメールアドレスとパスワードをPOST /api/auth/login に送信し、
   レスポンスのトークンをlocalStorageのkey:'authToken'に保存、
   成功時はダッシュボード画面(/dashboard)に遷移する」

✅ 「メールアドレス形式を正規表現パターン'^[^\s@]+@[^\s@]+\.[^\s@]+$'でチェックし、
   パスワードは8文字以上かつ英数字混在をvalidatePassword()関数で検証する」

✅ 「バリデーションエラー時は該当input要素の下に
   class:'error-message'の赤文字でメッセージを表示、
   API エラー時は画面上部にtoast形式で3秒間エラー内容を表示する」
```

### 6.2 失敗パターン2: 実装詳細の不足

**問題点**
- エラーハンドリングが曖昧
- データ形式が不明
- 画面遷移の条件が不明確

**対策**
- 正常系と異常系の両方を記述
- 具体的なデータ例を記載
- 条件分岐の詳細を明記

### 6.3 失敗パターン3: 更新されない設計書

**問題点**
- 仕様変更時に設計書が更新されない
- 実装と設計書の内容が乖離

**対策**
- 定期的なレビュー会の設定
- プルリクエスト時の設計書確認
- 設計書更新をタスクに含める

## 7. 設計書レビューのポイント

### 7.1 レビュー観点

**実装可能性**
- 記述内容で実装できるか
- 技術的制約に反していないか
- パフォーマンス上の問題はないか

**完全性**
- 漏れている処理はないか
- エラーケースは網羅されているか
- データの整合性は保たれるか

**保守性**
- 将来の変更に対応しやすいか
- テストしやすい構造か
- 他の機能への影響は最小限か

### 7.2 レビュー手順

1. **全体構造の確認**: 機能分割は適切か
2. **処理フローの確認**: ロジックに矛盾はないか
3. **詳細仕様の確認**: 実装に必要な情報は揃っているか
4. **例外処理の確認**: エラーハンドリングは十分か

## 8. 新人エンジニアへのアドバイス

### 8.1 学習のステップ

**Phase 1: 読み方をマスター**
1. 既存の設計書を読んで理解する
2. 実装コードと照らし合わせる
3. 不明点は積極的に質問する

**Phase 2: 簡単な機能から作成**
1. 小さな機能の設計書を作成
2. 先輩エンジニアにレビューしてもらう
3. フィードバックを元に改善

**Phase 3: 複雑な機能に挑戦**
1. 複数画面にまたがる機能を設計
2. チーム全体でのレビューに参加
3. 保守性や拡張性も考慮した設計

### 8.2 質問の仕方

**良い質問の例**
```
「この関数の戻り値の型が不明確なのですが、
 具体的にはどのような形式で返すべきでしょうか？」

「エラー時の画面遷移について、
 A パターンとB パターンのどちらが良いでしょうか？
 理由も含めて教えてください。」
```

**避けるべき質問**
```
「よく分からないので教えてください」
「これで合っていますか？」（具体性がない）
```

### 8.3 継続的な改善

**定期的な振り返り**
- 作成した設計書の精度を実装後に検証
- 同じミスを繰り返していないかチェック
- 効率的な書き方を模索

**他の人の設計書から学ぶ**
- チーム内の優秀な設計書を参考にする
- 業界のベストプラクティスを調査
- 新しい技術に合わせて書き方を更新

## まとめ

内部設計書は「実装の設計図」として、システム開発において欠かせない重要な文書です。新人エンジニアの皆さんは、以下のポイントを意識して取り組んでください：

### 重要なポイント
1. **具体性を重視**: 実装者が迷わないレベルの詳細さ
2. **段階的理解**: 全体→詳細の順で読み進める
3. **実装との照合**: 設計書とコードを常に対応付ける
4. **継続的改善**: 作成→レビュー→改善のサイクル

### 成長のために
- 分からないことは恥ずかしがらずに質問する
- 小さな機能から始めて徐々にスキルアップ
- 他の人の設計書から学び続ける

内部設計書のスキルを身につけることで、より高品質なシステム開発に貢献できるエンジニアになれるでしょう。頑張ってください！
