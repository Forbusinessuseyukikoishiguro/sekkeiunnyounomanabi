# 設計書作成テンプレート集

新人エンジニア向けの実用的な設計書テンプレートです。コピーして使用してください。

---

## 📋 テンプレート一覧

1. [画面遷移図テンプレート](#1-画面遷移図テンプレート)
2. [外部設計書テンプレート](#2-外部設計書テンプレート)
3. [画面設計書テンプレート](#3-画面設計書テンプレート)
4. [API仕様書テンプレート](#4-api仕様書テンプレート)
5. [詳細設計書テンプレート](#5-詳細設計書テンプレート)
6. [データベース設計書テンプレート](#6-データベース設計書テンプレート)

---

## 1. 画面遷移図テンプレート

### 基本情報
```markdown
# 画面遷移図

**システム名：** [システム名を記入]
**作成者：** [作成者名]
**作成日：** [YYYY/MM/DD]
**最終更新日：** [YYYY/MM/DD]
**バージョン：** [1.0]

---

## 画面一覧

| 画面ID | 画面名 | 概要 | 担当者 | 備考 |
|--------|--------|------|--------|------|
| G01 | [画面名] | [画面の概要] | [担当者] | [備考] |
| G02 | [画面名] | [画面の概要] | [担当者] | [備考] |
| G03 | [画面名] | [画面の概要] | [担当者] | [備考] |
| E01 | エラー画面 | システムエラー表示 | [担当者] | [備考] |
| M01 | [モーダル名] | [モーダルの概要] | [担当者] | [備考] |

---

## 画面遷移フロー

### 基本フロー
```
開始 → G01([画面名]) → G02([画面名]) → G03([画面名]) → 終了
```

### 詳細フロー
#### G01: [画面名]
- **正常遷移**
  - [操作] → G02([画面名])
  - [操作] → G03([画面名])
- **エラー遷移**
  - [エラー条件] → E01(エラー画面)
- **その他**
  - [その他操作] → [遷移先]

#### G02: [画面名]
- **正常遷移**
  - [操作] → G03([画面名])
  - [操作] → G01([画面名])
- **エラー遷移**
  - [エラー条件] → E01(エラー画面)

### 例外フロー
- **システムエラー** → E01(エラー画面)
- **セッションタイムアウト** → G01(ログイン画面)
- **権限エラー** → E02(権限エラー画面)

---

## 遷移条件

| 遷移元 | 遷移先 | 条件 | アクション | 備考 |
|--------|--------|------|------------|------|
| G01 | G02 | [条件] | [ボタン押下/リンククリック] | [備考] |
| G02 | G03 | [条件] | [ボタン押下/リンククリック] | [備考] |
| 全画面 | E01 | システムエラー | 自動遷移 | [備考] |

---

## 変更履歴

| 更新日 | バージョン | 更新箇所 | 更新内容 | 更新者 |
|--------|------------|----------|----------|--------|
| YYYY/MM/DD | 1.0 | - | 新規作成 | [更新者名] |
```

---

## 2. 外部設計書テンプレート

### 基本情報
```markdown
# 外部設計書

**システム名：** [システム名を記入]
**作成者：** [作成者名]
**作成日：** [YYYY/MM/DD]
**最終更新日：** [YYYY/MM/DD]
**バージョン：** [1.0]

---

## 目次
1. [概要](#概要)
2. [システム構成](#システム構成)
3. [画面仕様](#画面仕様)
4. [API仕様](#api仕様)
5. [外部インターフェース仕様](#外部インターフェース仕様)
6. [非機能要件](#非機能要件)

---

## 概要

### システム概要
[システムの目的・概要を記述]

### 対象ユーザー
- [ユーザー種別1]: [説明]
- [ユーザー種別2]: [説明]

### 前提条件
- [前提条件1]
- [前提条件2]

---

## システム構成

### アーキテクチャ図
```
[フロントエンド] ←→ [バックエンドAPI] ←→ [データベース]
      ↓                  ↓
[外部システム1]    [外部システム2]
```

### 技術スタック
- **フロントエンド**: [技術名・バージョン]
- **バックエンド**: [技術名・バージョン]
- **データベース**: [技術名・バージョン]
- **インフラ**: [技術名・バージョン]

---

## 変更履歴

| 更新日 | バージョン | 更新箇所 | 更新内容 | 更新者 |
|--------|------------|----------|----------|--------|
| YYYY/MM/DD | 1.0 | - | 新規作成 | [更新者名] |
```

---

## 3. 画面設計書テンプレート

### 画面別詳細設計
```markdown
# 画面設計書: [画面名] (G01)

## 基本情報
- **画面ID**: G01
- **画面名**: [画面名]
- **概要**: [画面の概要・目的]
- **アクセス権限**: [必要な権限]

---

## 画面レイアウト

### PC版
```
┌─────────────────────────────────┐
│           ヘッダー               │
├─────────────────────────────────┤
│  ナビ  │                       │
│  ゲー  │      メインコンテンツ    │
│  ション │                       │
├─────────────────────────────────┤
│           フッター               │
└─────────────────────────────────┘
```

### スマートフォン版
```
┌─────────────┐
│   ヘッダー    │
├─────────────┤
│            │
│   メイン    │
│  コンテンツ  │
│            │
├─────────────┤
│   フッター   │
└─────────────┘
```

---

## 画面要素

### 表示項目
| 項目名 | 表示内容 | 必須/任意 | 備考 |
|--------|----------|-----------|------|
| [項目名1] | [表示内容] | 必須 | [備考] |
| [項目名2] | [表示内容] | 任意 | [備考] |

### 入力項目
| 項目名 | 入力タイプ | 必須/任意 | 最大文字数 | バリデーション | エラーメッセージ |
|--------|------------|-----------|------------|----------------|------------------|
| [項目名1] | テキスト | 必須 | 50 | [バリデーション内容] | [エラーメッセージ] |
| [項目名2] | 選択 | 任意 | - | [バリデーション内容] | [エラーメッセージ] |

### ボタン・リンク
| 要素名 | 種類 | 動作 | 遷移先 | 表示条件 |
|--------|------|------|--------|----------|
| [ボタン名1] | ボタン | [処理内容] | [遷移先] | [表示条件] |
| [リンク名1] | リンク | [処理内容] | [遷移先] | [表示条件] |

---

## 業務ルール

### 表示ルール
- [表示ルール1]
- [表示ルール2]

### 入力ルール
- [入力ルール1]
- [入力ルール2]

### バリデーションルール
- [バリデーションルール1]
- [バリデーションルール2]

---

## エラーハンドリング

| エラー種別 | 発生条件 | エラーメッセージ | 処理内容 |
|------------|----------|------------------|----------|
| 入力エラー | [条件] | [メッセージ] | [処理] |
| システムエラー | [条件] | [メッセージ] | [処理] |

---

## 備考
- [特記事項があれば記載]
```

---

## 4. API仕様書テンプレート

### API仕様書
```markdown
# API仕様書

## 基本情報
- **API名**: [API名]
- **バージョン**: 1.0
- **ベースURL**: https://api.example.com/v1

---

## API一覧

| API ID | API名 | メソッド | エンドポイント | 概要 | 認証 |
|--------|-------|----------|----------------|------|------|
| A001 | [API名1] | GET | /[endpoint] | [概要] | [要/不要] |
| A002 | [API名2] | POST | /[endpoint] | [概要] | [要/不要] |
| A003 | [API名3] | PUT | /[endpoint] | [概要] | [要/不要] |
| A004 | [API名4] | DELETE | /[endpoint] | [概要] | [要/不要] |

---

## API詳細仕様

### A001: [API名]

#### 概要
[APIの概要・目的]

#### リクエスト
```http
GET /[endpoint]?param1=value1&param2=value2
Host: api.example.com
Authorization: Bearer [token]
Content-Type: application/json
```

#### リクエストパラメータ
| パラメータ名 | 型 | 必須 | 説明 | 例 |
|-------------|----|----|------|-----|
| param1 | string | ○ | [説明] | value1 |
| param2 | integer | △ | [説明] | 123 |

#### レスポンス

##### 正常時 (200 OK)
```json
{
  "status": "success",
  "data": {
    "id": 1,
    "name": "example",
    "created_at": "2025-01-01T00:00:00Z"
  }
}
```

##### エラー時 (400 Bad Request)
```json
{
  "status": "error",
  "error": {
    "code": "INVALID_PARAMETER",
    "message": "パラメータが不正です",
    "details": [
      {
        "field": "param1",
        "message": "必須項目です"
      }
    ]
  }
}
```

#### エラーコード
| HTTPステータス | エラーコード | 説明 |
|---------------|-------------|------|
| 400 | INVALID_PARAMETER | パラメータエラー |
| 401 | UNAUTHORIZED | 認証エラー |
| 404 | NOT_FOUND | リソースが見つからない |
| 500 | INTERNAL_ERROR | システムエラー |

---

### A002: [API名]

[同様の形式で記載]

---

## 共通仕様

### 認証
- **認証方式**: Bearer Token
- **ヘッダー**: `Authorization: Bearer [token]`

### レスポンス形式
- **Content-Type**: application/json
- **文字エンコード**: UTF-8

### エラーレスポンス共通形式
```json
{
  "status": "error",
  "error": {
    "code": "[エラーコード]",
    "message": "[エラーメッセージ]"
  }
}
```
```

---

## 5. 詳細設計書テンプレート

### 詳細設計書
```markdown
# 詳細設計書

## 基本情報
- **システム名**: [システム名]
- **モジュール名**: [モジュール名]
- **作成者**: [作成者名]
- **作成日**: [YYYY/MM/DD]

---

## クラス設計

### クラス一覧
| クラス名 | 概要 | 責務 | 備考 |
|----------|------|------|------|
| [クラス名1] | [概要] | [責務] | [備考] |
| [クラス名2] | [概要] | [責務] | [備考] |

---

### [クラス名]Controller

#### 概要
[クラスの概要・役割]

#### プロパティ
| プロパティ名 | 型 | アクセス | 説明 |
|-------------|----|---------|----- |
| [プロパティ名] | [型] | private | [説明] |

#### メソッド一覧
| メソッド名 | アクセス | 戻り値 | 概要 |
|-----------|---------|--------|------|
| [メソッド名1] | public | [型] | [概要] |
| [メソッド名2] | private | [型] | [概要] |

---

### [メソッド名1]()

#### 概要
[メソッドの概要・目的]

#### 引数
| 引数名 | 型 | 必須 | 説明 |
|--------|----|----|------|
| [引数名1] | [型] | ○ | [説明] |
| [引数名2] | [型] | △ | [説明] |

#### 戻り値
| 型 | 説明 |
|----|----- |
| [型] | [説明] |

#### 処理フロー
1. [処理ステップ1]
2. [処理ステップ2]
3. [処理ステップ3]
4. [処理ステップ4]
5. [戻り値の設定・返却]

#### 例外処理
| 例外クラス | 発生条件 | 処理内容 |
|------------|----------|----------|
| [例外名1] | [条件] | [処理] |
| [例外名2] | [条件] | [処理] |

#### 実装例
```java
public [戻り値型] [メソッド名]([引数]) throws [例外] {
    // 処理の実装例
    try {
        // メイン処理
        [処理内容]
        
        return [戻り値];
    } catch ([例外名] e) {
        // 例外処理
        [例外処理内容]
        throw new [例外名]("[メッセージ]");
    }
}
```

---

## データアクセス層

### Repository設計

#### [Repository名]

##### 概要
[Repositoryの概要・責務]

##### メソッド一覧
| メソッド名 | 概要 | SQL種別 |
|-----------|------|---------|
| findById | ID検索 | SELECT |
| findAll | 全件取得 | SELECT |
| save | 保存 | INSERT/UPDATE |
| delete | 削除 | DELETE |

##### findById()
```sql
SELECT 
    [カラム1],
    [カラム2],
    [カラム3]
FROM 
    [テーブル名]
WHERE 
    id = ?
```

---

## 処理フロー

### シーケンス図
```
[呼び出し元] → [Controller] → [Service] → [Repository] → [DB]
            ←               ←           ←              ←
```

### 例外処理フロー
```
例外発生 → ログ出力 → エラーレスポンス生成 → クライアントへ返却
```
```

---

## 6. データベース設計書テンプレート

### データベース設計書
```markdown
# データベース設計書

## 基本情報
- **データベース名**: [DB名]
- **DBMS**: [MySQL 8.0 / PostgreSQL 14 等]
- **文字エンコード**: UTF-8
- **作成者**: [作成者名]
- **作成日**: [YYYY/MM/DD]

---

## テーブル一覧

| テーブル名 | 論理名 | 概要 | 主キー | 備考 |
|-----------|--------|------|--------|------|
| [テーブル名1] | [論理名] | [概要] | [主キー] | [備考] |
| [テーブル名2] | [論理名] | [概要] | [主キー] | [備考] |

---

## テーブル設計

### [テーブル名1]

#### 概要
[テーブルの概要・用途]

#### テーブル定義
| カラム名 | 論理名 | 型 | サイズ | NULL | デフォルト | 主キー | 外部キー | 説明 |
|----------|--------|----|----|------|------------|-------|----------|------|
| id | ID | BIGINT | - | NOT NULL | AUTO_INCREMENT | ○ | - | 主キー |
| [カラム名] | [論理名] | VARCHAR | 100 | NOT NULL | - | - | - | [説明] |
| [カラム名] | [論理名] | INT | - | NULL | 0 | - | - | [説明] |
| created_at | 作成日時 | TIMESTAMP | - | NOT NULL | CURRENT_TIMESTAMP | - | - | 作成日時 |
| updated_at | 更新日時 | TIMESTAMP | - | NOT NULL | CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP | - | - | 更新日時 |

#### インデックス
| インデックス名 | 種別 | カラム | 説明 |
|--------------|------|--------|------|
| PRIMARY | PRIMARY | id | 主キー |
| idx_[テーブル名]_[カラム名] | INDEX | [カラム名] | [説明] |
| uk_[テーブル名]_[カラム名] | UNIQUE | [カラム名] | [説明] |

#### 制約
| 制約名 | 種別 | カラム | 説明 |
|--------|------|--------|------|
| fk_[テーブル名]_[参照テーブル名] | FOREIGN KEY | [カラム名] | [参照テーブル名].[カラム名]への外部キー |

#### DDL
```sql
CREATE TABLE [テーブル名] (
    id BIGINT AUTO_INCREMENT,
    [カラム名] VARCHAR(100) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    INDEX idx_[テーブル名]_[カラム名] ([カラム名])
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
```

---

## ER図

### 論理ER図
```
[テーブル1] ─── [テーブル2]
    │              │
    │              │
[テーブル3] ─── [テーブル4]
```

### リレーション一覧
| 親テーブル | 子テーブル | 関係 | 外部キー | 説明 |
|------------|------------|------|----------|------|
| [親テーブル名] | [子テーブル名] | 1:N | [外部キーカラム] | [関係の説明] |

---

## データ容量設計

### 想定データ量
| テーブル名 | 初期データ量 | 年間増加量 | 5年後想定量 | 備考 |
|-----------|-------------|------------|-------------|------|
| [テーブル名1] | [件数] | [件数] | [件数] | [備考] |

### ディスク容量
- **想定容量**: [XX]GB（5年後）
- **バックアップ容量**: [XX]GB
- **インデックス容量**: [XX]GB

---

## パフォーマンス設計

### 想定処理量
- **同時接続数**: [XX]ユーザー
- **1日あたりトランザクション数**: [XX]件
- **ピーク時TPS**: [XX]件/秒

### チューニング指針
- [チューニング方針1]
- [チューニング方針2]

---

## バックアップ・リストア

### バックアップ方針
- **バックアップ種別**: [フル/差分/ログ]
- **バックアップ頻度**: [頻度]
- **保存期間**: [期間]

### リストア手順
1. [手順1]
2. [手順2]
3. [手順3]
```

---

## 📝 使用方法

### 1. テンプレートのコピー
各テンプレートをコピーして、プロジェクトに合わせて内容を記入してください。

### 2. カスタマイズのポイント
- **[  ]部分**: プロジェクト固有の情報に置き換え
- **表の行数**: 必要に応じて増減
- **セクション**: 不要な部分は削除OK

### 3. バージョン管理
- ファイル名に日付やバージョンを含める
- 変更履歴を必ず記録
- レビュー結果も記録

### 4. チーム共有
- チーム内でテンプレート形式を統一
- 命名規則を事前に決定
- レビュー基準を明確化

---

## 💡 活用のコツ

**効率的な使い方：**
1. **段階的作成**: 概要→詳細の順で段階的に作成
2. **テンプレート改善**: 使いながら継続的に改善
3. **チーム標準化**: チーム内でフォーマットを統一
4. **自動化**: 可能な部分はツールで自動生成

**品質向上のポイント：**
1. **レビュー必須**: 必ず他者によるレビューを実施
2. **実装者視点**: 実際に作る人が理解できる内容に
3. **継続更新**: 実装中の気づきを設計書に反映
4. **トレーサビリティ**: 要件から実装まで追跡可能に

このテンプレート集を活用して、効率的で品質の高い設計書を作成しましょう！
