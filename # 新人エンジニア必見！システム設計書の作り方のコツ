# 新人エンジニア必見！システム設計書の作り方のコツ

## はじめに

システム開発において設計書は「設計図」のような存在です。建築で言えば、設計図なしに家を建てることができないように、システム開発でも設計書なしに良いシステムを作ることはできません。

この記事では、新人エンジニアの皆さんが実際の現場で必要になる4つの重要な設計書について、**作り方のコツ**を中心に解説します。

## 1. テーブル定義書：データベースの設計図を作る

### テーブル定義書とは？

データベースのテーブル構造を定義する設計書です。「どんなデータを」「どのような形式で」「どこに格納するか」を明確にします。

### 作り方の基本ステップ

#### Step 1: テーブル名を決める
```
論理名：保険商品マスタ（日本語で分かりやすく）
物理名：m01_insurance（実際のDB名）
```

**コツ：**
- 論理名は業務的な意味が分かる名前にする
- 物理名は命名規則に従う（例：m01_はマスタテーブルの01番）

#### Step 2: カラムを洗い出す
業務要件から必要なデータ項目を抽出します。

**コツ：**
- 業務フローを追いかけて必要なデータを考える
- 将来の拡張性も考慮する
- 似たような既存テーブルがあれば参考にする

#### Step 3: 主キー（PK）を決める
テーブル内でレコードを一意に識別する項目です。

**コツ：**
- 自然キー（意味のある値）vs サロゲートキー（連番）を検討
- 複合キーは避けられるなら避ける
- 主キーは変更されない値にする

#### Step 4: データ型を決める
```
VARCHAR：文字列（可変長）
CHAR：文字列（固定長）
INT：整数
DATE：日付
```

**コツ：**
- 文字列は基本的にVARCHARを使う
- 桁数は余裕を持って設定するが、過度に大きくしない
- 日付型は適切なDATE/DATETIME型を使う

#### Step 5: 制約を設定する
```
NOT NULL：必須項目
FK：他テーブルとの関連
UNIQUE：重複不可
```

**コツ：**
- 必須項目は最初からNOT NULLにする
- 外部キーは必ず設定してデータ整合性を保つ
- インデックスが必要な項目を考慮する

### 実践例：保険商品マスタの作り方

```
テーブル名：保険商品マスタ
テーブル物理名：m01_insurance

1. 保険商品コード（insurance_cd）VARCHAR(3) PK NOT NULL
   → 3桁の固定長なのでCHAR(3)の方が良いかも？

2. 保険商品名（insurance_name）VARCHAR(255)
   → 255文字は多すぎる？100文字程度で十分かも？

3. 追加で考慮すべき項目：
   - 作成日時（created_at）
   - 更新日時（updated_at）
   - 削除フラグ（delete_flag）
```

## 2. メッセージ定義書：ユーザーに優しいメッセージを作る

### メッセージ定義書とは？

システムで表示するメッセージを一元管理する設計書です。エラーメッセージ、確認メッセージ、情報メッセージなどを定義します。

### 作り方の基本ステップ

#### Step 1: メッセージIDの体系を決める
```
VKCO00000：システムコード(VK) + 機能コード(CO) + 連番(00000)
```

**コツ：**
- システム全体で統一したID体系にする
- 機能別にグループ分けする
- 連番は5桁程度で余裕を持つ

#### Step 2: メッセージの分類を決める
```
エラーメッセージ：E001～E999
警告メッセージ：W001～W999
情報メッセージ：I001～I999
確認メッセージ：C001～C999
```

**コツ：**
- メッセージタイプ別に番号を分ける
- 似たような用途のメッセージは近い番号にする
- 削除されたメッセージの番号は再利用しない

#### Step 3: ユーザー目線でメッセージを作る

**悪い例：**
```
「エラーが発生しました」
「入力値が不正です」
「処理に失敗しました」
```

**良い例：**
```
「必須入力項目です」
「半角数字で入力してください」
「保存が完了しました」
```

**コツ：**
- 具体的で分かりやすい文言にする
- ユーザーが次に何をすべきかを示す
- 専門用語は避ける
- 敬語を統一する

### 実践例：エラーメッセージの作り方

```
業務：保険申込画面の入力チェック

VKCO00001：必須入力項目です
→ どの項目が必須かも分かるように改善
「○○は必須入力項目です」

VKCO00002：必須項目の入力がもれています
→ 上記と似ているので統一を検討
```

## 3. コード定義書：システムの共通言語を作る

### コード定義書とは？

システムで使用するコード値とその意味を定義する設計書です。性別、都道府県、ステータスなどの分類値を管理します。

### 作り方の基本ステップ

#### Step 1: コードのグループ分けを決める
```
001：性別
002：都道府県
003：職業
004：申込ステータス
```

**コツ：**
- 業務的に意味のあるグループに分ける
- 3桁程度の番号で管理する
- 将来の追加を考慮して番号を飛ばす

#### Step 2: コード値の付け方を決める

**連番方式：**
```
性別：1=男性、2=女性、3=その他
```

**意味のある値方式：**
```
性別：M=Male、F=Female、O=Other
```

**コツ：**
- システム全体で統一する
- 意味のある値は覚えやすいが、日本語システムでは連番も有効
- 削除されたコードも履歴として残す

#### Step 3: 拡張性を考慮する
```
申込ステータス：
10：申込受付
20：審査中
30：承認済み
40：契約完了
99：キャンセル
```

**コツ：**
- 番号を飛ばしてステータスの追加に対応
- 業務フローの順番に番号を振る
- 終了状態は大きな番号にする

### 実践例：性別コードの改善

```
現在：
001 性別 1 Male
001 性別 2 Female

改善案：
001 性別 1 男性
001 性別 2 女性
001 性別 9 その他

改善ポイント：
- 日本語システムなので日本語表示
- 「その他」を追加して多様性に配慮
- 9番を使って特別な意味を持たせる
```

## 4. 画面一覧：セキュリティの基盤を作る

### 画面一覧とは？

システムの全画面を一覧化し、各画面のアクセス権限を定義する設計書です。

### 作り方の基本ステップ

#### Step 1: 画面IDの体系を決める
```
G00：共通画面
G01：申込関連画面
G02：契約管理画面
G03：管理画面
```

**コツ：**
- 機能別にグループ分けする
- 3桁程度で管理する
- 共通画面は特別な番号にする

#### Step 2: ユーザー種別を整理する
```
お客様（契約者）
コールセンター
社内（一般ユーザー）
社内（管理ユーザー）
BPO委託先
代理店
代理店（告知参照可）
```

**コツ：**
- 業務上の役割に応じて分類する
- 権限レベルを明確にする
- 将来の組織変更も考慮する

#### Step 3: 最小権限の原則を適用する
各ユーザーには必要最小限の権限のみを付与します。

**コツ：**
- 「なぜこの画面にアクセスが必要か」を明確にする
- 個人情報を扱う画面は特に慎重に
- 管理機能は管理者のみにアクセス許可

### 実践例：権限設計の考え方

```
G01 申込入力画面
お客様：○（自分で申込するため）
代理店：○（代理で申込するため）
コールセンター：○（電話で申込を受けるため）
社内一般：×（業務上不要）
社内管理：○（問い合わせ対応のため）
```

## 設計書作成の全般的なコツ

### 1. 命名規則を統一する
```
テーブル名：m01_insurance（マスタ01_保険）
カラム名：insurance_cd（保険_コード）
メッセージID：VKCO00001（システム機能連番）
```

### 2. 将来の拡張性を考慮する
- ID体系に余裕を持つ
- 項目の追加を想定した設計
- 削除ではなく無効化の仕組み

### 3. 一貫性を保つ
- 用語の統一
- 表記方法の統一
- データ型の統一

### 4. レビューを必ず実施する
- 複数人での確認
- 他システムとの整合性チェック
- 業務担当者との確認

### 5. 更新履歴を管理する
- 変更理由の記録
- 更新者・更新日の記録
- バージョン管理

## まとめ

設計書は一度作って終わりではなく、システムの成長と共に育てていくものです。最初は完璧でなくても、継続的に改善していくことが大切です。

**新人エンジニアの皆さんへのアドバイス：**

1. **完璧を目指さず、まずは作ってみる**
2. **先輩エンジニアの設計書を参考にする**
3. **業務担当者としっかりコミュニケーションを取る**
4. **小さな改善を積み重ねる**
5. **なぜその設計にしたのか理由を明確にする**

良い設計書は、開発効率を向上させ、保守性の高いシステムを作る基盤になります。最初は時間がかかりますが、経験を積むことで自然と品質の高い設計書が書けるようになります。

頑張ってください！
