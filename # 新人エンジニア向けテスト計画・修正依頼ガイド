# 新人エンジニア向けテスト計画・修正依頼ガイド

## はじめに

システム開発において、テスト工程は品質確保の要となる重要なフェーズです。本ガイドでは、新人エンジニアの皆さんが運用テスト、性能テスト、総合テストの計画書を作成し、適切な修正依頼を行えるよう、実践的な知識とスキルを提供します。

---

## 1. テストの種類と目的

### 1.1 運用テスト（User Acceptance Test: UAT）

**目的**: 実際の運用環境で、業務要件を満たしているかを確認する

**特徴**:
- エンドユーザーが主体となって実施
- 実際の業務シナリオに基づいたテスト
- 運用手順やマニュアルの妥当性も確認
- 本番環境またはそれに近い環境で実施

**確認項目**:
- 業務フローの実現性
- 操作性・使いやすさ
- 帳票・画面の妥当性
- 運用手順の実行可能性
- データの正確性

### 1.2 性能テスト（Performance Test）

**目的**: システムの性能が要件を満たしているかを確認する

**特徴**:
- 負荷をかけた状態でのシステム動作を検証
- レスポンス時間、スループット、リソース使用率を測定
- 本番環境に近い条件での実施が重要
- 性能劣化の原因特定と改善提案

**確認項目**:
- レスポンス時間
- 同時接続ユーザー数
- データ処理能力
- システムリソース使用率
- 安定性・信頼性

### 1.3 総合テスト（System Integration Test: SIT）

**目的**: システム全体として機能が正しく連携しているかを確認する

**特徴**:
- 複数のサブシステム間の連携を検証
- エンドツーエンドのシナリオテスト
- 外部システムとの連携も含む
- 異常系・例外処理も重要

**確認項目**:
- システム間のデータ連携
- 業務シナリオの完全実行
- 異常処理・エラーハンドリング
- セキュリティ機能
- バックアップ・リカバリ機能

---

## 2. テスト計画書の作成方法

### 2.1 基本構成

#### 表紙
- 文書タイトル「○○システム テスト計画書」
- 対象システム名
- テスト種別（運用テスト/性能テスト/総合テスト）
- バージョン
- 作成日・作成者
- 承認者

#### 変更履歴
| 版数 | 変更日 | 変更内容 | 変更者 |
|------|--------|----------|--------|
| 1.0 | 2024-07-15 | 初版作成 | 山田太郎 |

#### 目次
1. テスト目的
2. テスト対象範囲
3. テスト方針・理想
4. テスト実施方法・完了基準
5. テストスケジュール
6. テスト環境
7. 実施体制
8. テストケース概要
9. リスク・課題

### 2.2 各章の詳細内容

#### 2.2.1 テスト目的

**記載内容**:
- なぜこのテストを実施するのか
- 何を確認・検証したいのか
- テストによって得たい成果

**運用テストの例**:
```
【テスト目的】
本運用テストは、○○システムが実際の業務において要件を満たし、
エンドユーザーが問題なく業務を遂行できることを確認する。

具体的には以下を目的とする：
1. 業務フローの実現可能性の確認
2. システムの操作性・使いやすさの検証
3. 出力帳票の正確性・妥当性の確認
4. 運用手順・マニュアルの妥当性検証
5. 本番稼働に向けた課題の洗い出し
```

**性能テストの例**:
```
【テスト目的】
本性能テストは、○○システムが定義された性能要件を満たし、
本番運用時の負荷条件下でも安定して動作することを確認する。

具体的には以下を目的とする：
1. レスポンス時間要件の達成確認
2. 同時接続ユーザー数要件の達成確認
3. システムリソース使用量の測定・評価
4. 性能劣化要因の特定と改善提案
5. 本番運用時の性能監視基準値の設定
```

#### 2.2.2 テスト対象範囲

**記載内容**:
- テスト対象のシステム・機能
- テスト対象外の項目
- 対象データの範囲
- 対象業務の範囲

**記載例**:
```
【テスト対象範囲】
■対象システム
・○○管理システム（全機能）
・△△連携システム（データ連携部分のみ）

■対象機能
・ユーザー管理機能
・商品管理機能
・受注管理機能
・帳票出力機能
・データ連携機能

■対象外
・□□システムとの連携（次期リリース対応）
・管理者機能の一部（権限管理）
```

#### 2.2.3 テスト方針・理想

**記載内容**:
- テストの基本的な考え方
- 重点的に確認する項目
- テストの品質基準
- リスクベースのアプローチ

**記載例**:
```
【テスト方針】
1. 実業務に即したシナリオベースのテストを重視
2. ユーザビリティを重点的に評価
3. 異常系・例外処理も必ず確認
4. 性能要件は定量的に測定・評価
5. 本番運用を想定した環境でのテスト実施

【品質基準】
・機能テスト：合格率95%以上
・性能テスト：要件定義の基準値クリア
・運用テスト：ユーザー満足度80%以上
```

#### 2.2.4 テスト実施方法・完了基準

**記載内容**:
- テストの実施手順
- テストケースの実行方法
- 結果の記録方法
- 完了判定基準

**記載例**:
```
【実施方法】
1. テスト環境の準備・データ投入
2. テストケースの実行
3. 結果記録・エビデンス取得
4. 不具合発見時の報告・管理
5. 再テスト実施
6. 完了判定・報告書作成

【完了基準】
・全テストケースの実行完了
・重要度A・Bの不具合解消
・性能要件の達成確認
・ユーザー承認の取得
```

#### 2.2.5 テストスケジュール

**記載内容**:
- テスト準備期間
- テスト実施期間
- 各工程の期間・担当者
- マイルストーン

**記載例**:
```
【テストスケジュール】
・テスト準備：7/15-7/19（5日間）
・環境構築：7/20-7/22（3日間）
・テスト実施：7/25-8/5（10日間）
・不具合修正・再テスト：8/6-8/12（5日間）
・完了報告：8/13-8/15（3日間）
```

#### 2.2.6 テスト環境

**記載内容**:
- 使用する環境の詳細
- 本番環境との差異
- テストデータの準備方法
- 環境利用時間・制約

#### 2.2.7 実施体制

**記載内容**:
- テスト責任者
- テスト実施者
- 役割・責任分担
- 連絡体制

#### 2.2.8 テストケース概要

**記載内容**:
- テストケースの分類
- 各分類のテスト項目数
- 重要度・優先度の分布
- 別紙での詳細テストケース参照

---

## 3. テストケース設計のポイント

### 3.1 運用テストケース

**設計方針**:
- 実際の業務シナリオに基づく
- エンドユーザーの操作手順を再現
- 使いやすさ・効率性も評価項目に含める

**テストケース例**:
```
【TC-UAT-001】新規顧客登録
前提条件：管理者権限でログイン済み
実施手順：
1. 顧客管理画面を開く
2. 「新規登録」ボタンをクリック
3. 必須項目をすべて入力
4. 「登録」ボタンをクリック
期待結果：
・顧客情報が正常に登録される
・一覧画面に新規顧客が表示される
・登録完了メッセージが表示される
評価項目：
・操作の分かりやすさ（5段階評価）
・入力のしやすさ（5段階評価）
```

### 3.2 性能テストケース

**設計方針**:
- 性能要件に基づいた定量的な測定
- 段階的な負荷増加によるテスト
- ボトルネックの特定

**テストケース例**:
```
【TC-PERF-001】ログイン処理性能
目的：同時ログイン処理の性能確認
条件：
・同時接続ユーザー数：10, 50, 100, 200人
・実施時間：各条件30分間
測定項目：
・平均レスポンス時間
・95%タイルレスポンス時間
・エラー率
・CPU使用率
・メモリ使用率
成功基準：
・平均レスポンス時間：3秒以内
・エラー率：1%以下
```

### 3.3 総合テストケース

**設計方針**:
- エンドツーエンドのシナリオ
- システム間連携の確認
- 異常系・例外処理の確認

**テストケース例**:
```
【TC-SIT-001】受注から出荷までの業務フロー
目的：受注業務全体の流れを確認
前提条件：
・顧客マスタ登録済み
・商品マスタ登録済み
実施手順：
1. 受注システムで注文登録
2. 在庫システムで在庫引当
3. 出荷システムで出荷指示
4. 各システムでデータ連携確認
期待結果：
・全システムでデータが正しく連携される
・各工程で正常な処理が完了する
```

---

## 4. 修正依頼書の書き方

### 4.1 修正依頼書の目的

修正依頼書は、テスト実施中に発見された不具合や改善要望を開発チームに正確に伝え、効率的な修正作業を促進するための重要な文書です。

### 4.2 修正依頼書の基本構成

#### 表紙・基本情報
- タイトル：「修正依頼書」
- 対象システム名
- 作成日・作成者
- 緊急度・重要度

#### 修正依頼一覧
| No | 機能名 | 不具合内容 | 重要度 | 担当者 | 期限 | 状況 |
|----|--------|------------|--------|--------|------|------|
| 001 | ログイン | パスワード検証エラー | 高 | 山田 | 7/20 | 対応中 |

### 4.3 個別修正依頼の詳細記載方法

#### 基本情報
```
【修正依頼No】: REQ-001
【発生日時】: 2024年7月15日 14:30
【発見者】: 田中花子
【対象機能】: ユーザーログイン機能
【重要度】: 高（業務に重大な影響）
【緊急度】: 高（即座の対応が必要）
```

#### 問題の詳細説明
```
【問題の概要】
特定の文字を含むパスワードでログインできない

【詳細説明】
パスワードに記号「@」「#」「$」を含む場合、
正しいパスワードを入力してもログインエラーが発生する。
エラーメッセージ：「パスワードが正しくありません」

【発生条件】
・パスワードに記号（@、#、$）が含まれる場合
・ブラウザ：Chrome 115.0以降
・OS：Windows 10/11
```

#### 再現手順
```
【再現手順】
1. ログイン画面にアクセス
2. ユーザーID：「test@example.com」を入力
3. パスワード：「Pass@123」を入力
4. 「ログイン」ボタンをクリック

【期待される動作】
正常にログインできる

【実際の動作】
「パスワードが正しくありません」エラーが表示される
```

#### エビデンス・添付資料
```
【添付資料】
・スクリーンショット：login_error_001.png
・ログファイル：error_log_20240715.txt
・テスト環境情報：test_env_info.xlsx
```

#### 影響範囲・業務への影響
```
【影響範囲】
・対象ユーザー：記号を含むパスワードを設定している全ユーザー
・推定影響ユーザー数：約200名（全体の30%）

【業務への影響】
・ログインできないため業務が停止
・パスワード再設定の手間が発生
・ユーザーからの問い合わせ増加
```

#### 修正要求・提案
```
【修正要求】
パスワード検証処理において、記号文字を正しく処理できるよう修正

【修正提案】
・パスワード検証時のエスケープ処理を見直し
・記号文字の処理ロジック修正
・単体テストでの記号文字パターン追加

【希望対応期限】
2024年7月18日（金）17:00まで
理由：月曜日の業務開始前に修正完了させたい
```

### 4.4 重要度・緊急度の設定基準

#### 重要度の分類
- **高**: 業務停止、データ破損等の重大な影響
- **中**: 業務効率低下、一部機能不具合
- **低**: 見た目の問題、軽微な使い勝手の問題

#### 緊急度の分類
- **高**: 即座の対応が必要（当日中）
- **中**: 数日以内の対応が必要
- **低**: 次回リリース時での対応可

#### 優先度マトリックス
| 重要度＼緊急度 | 高 | 中 | 低 |
|----------------|----|----|---- |
| **高** | 最優先 | 優先 | 通常 |
| **中** | 優先 | 通常 | 低優先 |
| **低** | 通常 | 低優先 | 最低優先 |

### 4.5 効果的な修正依頼のポイント

#### 1. 具体的で明確な記述
- 曖昧な表現は避ける
- 具体的な数値や操作手順を記載
- 専門用語は統一して使用

#### 2. 再現可能な情報の提供
- 確実に再現できる手順を記載
- 環境情報を詳細に記録
- エビデンスを確実に取得

#### 3. 業務への影響を明確化
- どの業務にどのような影響があるか
- 影響を受けるユーザー数
- 代替手段の有無

#### 4. 建設的な修正提案
- 単なる指摘ではなく改善案も提示
- 技術的な観点からの提案
- ユーザビリティ向上の提案

---

## 5. テスト結果報告書の作成

### 5.1 報告書の基本構成

#### エグゼクティブサマリー
- テスト結果の要約
- 主要な発見事項
- 推奨事項
- Go/No-Goの判定

#### テスト実施結果
```
【テスト実施サマリー】
・テスト期間：2024年7月15日～7月25日
・テストケース総数：150件
・実行完了：148件
・合格：140件
・不合格：8件
・実行率：98.7%
・合格率：94.6%
```

#### 発見された問題・課題
```
【不具合サマリー】
・重要度高：2件（修正完了：2件）
・重要度中：4件（修正完了：3件、対応中：1件）
・重要度低：2件（次回リリース対応）

【主要な発見事項】
1. ログイン機能の記号文字処理問題→修正完了
2. 帳票出力時のメモリリーク→修正完了
3. レスポンス時間が一部で基準値超過→性能改善実施
```

#### 推奨事項・今後の課題
```
【推奨事項】
1. 本番稼働：条件付きで推奨
   条件：残り1件の中重要度問題の修正完了
2. 運用時の注意事項：
   ・ピーク時間帯の性能監視強化
   ・ユーザー教育の実施

【今後の課題】
・性能監視ツールの導入検討
・ユーザビリティ改善の継続的実施
```

---

## 6. 新人エンジニアへの実践的アドバイス

### 6.1 テスト計画書作成時の注意点

#### よくある失敗パターン
1. **目的が不明確**
   - 何のためのテストか分からない
   - 期待する成果が曖昧

2. **範囲の設定ミス**
   - 対象範囲が広すぎる/狭すぎる
   - 対象外の明記不足

3. **現実的でないスケジュール**
   - バッファ時間の不足
   - 前後工程との調整不足

#### 改善のポイント
1. **要件定義書との整合性確認**
   - テスト対象は要件と一致しているか
   - 成功基準は明確で測定可能か

2. **リスクベースアプローチ**
   - 重要度の高い機能を重点的にテスト
   - リスクの高い部分には十分な時間を確保

3. **関係者との合意形成**
   - ステークホルダーの期待値を確認
   - テストの制約・前提を共有

### 6.2 テスト実施時のコツ

#### 効率的なテスト実行
1. **テスト環境の事前準備**
   - データの準備とバックアップ
   - 環境の動作確認

2. **エビデンスの取得方法**
   - スクリーンショットの撮影タイミング
   - ログの取得設定

3. **問題発見時の対応**
   - 再現性の確認
   - 影響範囲の調査
   - 緊急度の判定

#### チームワークの重要性
1. **コミュニケーション**
   - 定期的な進捗報告
   - 問題の早期共有

2. **知識の共有**
   - テスト結果の共有
   - ノウハウの蓄積

### 6.3 品質向上のための継続的改善

#### テストプロセスの改善
1. **振り返りの実施**
   - テスト完了後の反省会
   - 改善点の洗い出し

2. **ノウハウの蓄積**
   - 効果的だったテスト手法の記録
   - 問題パターンの分析

3. **ツール・自動化の活用**
   - テスト実行の自動化
   - 効率化ツールの導入

---

## 7. チェックリスト

### 7.1 テスト計画書作成チェックリスト

#### 基本項目
- [ ] テスト目的が明確に記載されている
- [ ] テスト対象範囲が適切に設定されている
- [ ] テスト対象外が明記されている
- [ ] 完了基準が具体的で測定可能
- [ ] スケジュールが現実的
- [ ] 実施体制・役割分担が明確
- [ ] リスク・課題が特定されている

#### 内容の品質
- [ ] 要件定義書との整合性が取れている
- [ ] ステークホルダーの合意が得られている
- [ ] 前後工程との連携が考慮されている
- [ ] 必要なリソースが確保されている

### 7.2 修正依頼書作成チェックリスト

#### 必須項目
- [ ] 問題の概要が明確
- [ ] 再現手順が詳細に記載
- [ ] 期待結果と実際の結果が明記
- [ ] 影響範囲が分析されている
- [ ] 重要度・緊急度が適切に設定
- [ ] エビデンスが添付されている

#### 品質向上項目
- [ ] 建設的な修正提案がされている
- [ ] 業務への影響が定量的に記載
- [ ] 代替手段が検討されている
- [ ] 類似問題の可能性が考慮されている

---

## まとめ

テスト工程は、システムの品質を保証する重要な工程です。新人エンジニアの皆さんも、このガイドを参考に、以下の点を心がけてください：

1. **計画の重要性**: しっかりとした計画がテストの成功を決める
2. **コミュニケーション**: 関係者との密な連携が品質向上の鍵
3. **継続的改善**: 毎回のテストから学び、プロセスを改善する
4. **ユーザー視点**: 最終的にはユーザーの満足度が重要

最初は難しく感じるかもしれませんが、経験を積むことで必ず上達します。分からないことがあれば、積極的に先輩エンジニアに相談し、チーム全体で品質の高いシステムを作り上げていきましょう。

---

*このガイドは新人エンジニアの教育・研修目的で作成されています。実際のプロジェクトでは、各組織のプロセスやガイドラインに従って実施してください。*
