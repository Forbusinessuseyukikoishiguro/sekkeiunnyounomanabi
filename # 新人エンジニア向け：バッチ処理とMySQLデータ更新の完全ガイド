# 新人エンジニア向け：バッチ処理とMySQLデータ更新の完全ガイド

## バッチ処理とは？

**バッチ処理**とは、大量のデータを一括で処理する方法です。リアルタイム処理とは異なり、決まった時間や条件でまとめてデータを処理します。

### バッチ処理の特徴
- **一括処理**: 複数のデータを同時に処理
- **効率的**: 1件ずつ処理するより高速
- **安全**: トランザクションで一貫性を保持
- **スケジュール実行**: 定期的な自動実行が可能

## 実例：リンゴ商品データの一括更新

今回は「リンゴ」→「リンゴ❤」への商品名変更を例に、バッチ処理の実装を学びます。

### ステップ1: 事前準備（安全対策）

```sql
-- 1. まず対象データを確認する
-- WHEREで条件を指定して、更新対象のレコードを表示
SELECT 
    id,                    -- 主キー（レコードを識別するID）
    product_name,          -- 商品名カラム
    description,           -- 商品説明カラム
    notes                  -- 備考カラム
FROM apple_sales_weekly    -- テーブル名：週次のリンゴ売上データ
WHERE product_name LIKE '%リンゴ%';  -- 商品名に「リンゴ」を含むレコードを検索
```

**解説：**
- `SELECT`：データを取得するSQL文
- `LIKE '%リンゴ%'`：「リンゴ」という文字を含む文字列を検索
  - `%`：ワイルドカード（任意の文字列）
  - 例：「青森リンゴ」「リンゴジュース」「赤リンゴ100個」など全て該当

### ステップ2: バックアップの作成

```sql
-- 2. 更新前にバックアップテーブルを作成
-- 元のテーブル構造とデータをコピーして安全を確保
CREATE TABLE apple_sales_weekly_backup 
AS SELECT * FROM apple_sales_weekly;  -- 全てのデータをバックアップテーブルにコピー

-- バックアップが正常に作成されたか確認
SELECT COUNT(*) FROM apple_sales_weekly_backup;  -- レコード数をカウント
```

**解説：**
- `CREATE TABLE ... AS SELECT`：既存テーブルの構造とデータをコピーして新テーブル作成
- バックアップは「万が一の失敗に備えた保険」
- 本番環境では必須の作業

### ステップ3: トランザクション開始

```sql
-- 3. トランザクションを開始
-- 複数の処理を一つの単位として管理
START TRANSACTION;  -- トランザクション開始宣言
```

**解説：**
- **トランザクション**：複数のSQL文を「全て成功」か「全て失敗」として扱う仕組み
- 途中でエラーが起きても、`ROLLBACK`で元に戻せる
- 全て成功したら`COMMIT`で確定

### ステップ4: 単一カラムの一括更新

```sql
-- 4. 商品名カラムのみを更新する場合
UPDATE apple_sales_weekly           -- 更新対象のテーブル
SET product_name = REPLACE(         -- SETで更新する内容を指定
    product_name,                   -- 元の商品名
    'リンゴ',                       -- 置換前の文字列
    'リンゴ❤'                       -- 置換後の文字列
)
WHERE product_name LIKE '%リンゴ%'; -- 更新条件：商品名に「リンゴ」を含む
```

**解説：**
- `UPDATE`：既存レコードを更新するSQL文
- `REPLACE(対象文字列, 置換前, 置換後)`：文字列置換関数
- `WHERE`句が重要：これがないと全レコードが更新される危険性あり

### ステップ5: 複数カラムの一括更新

```sql
-- 5. 複数のカラムを同時に更新する場合
UPDATE apple_sales_weekly 
SET 
    -- 商品名の「リンゴ」を「リンゴ❤」に置換
    product_name = REPLACE(product_name, 'リンゴ', 'リンゴ❤'),
    
    -- 商品説明の「リンゴ」を「リンゴ❤」に置換  
    description = REPLACE(description, 'リンゴ', 'リンゴ❤'),
    
    -- 備考欄の「リンゴ」を「リンゴ❤」に置換
    notes = REPLACE(notes, 'リンゴ', 'リンゴ❤'),
    
    -- 更新日時も記録（任意）
    updated_at = NOW()              -- 現在日時を設定
WHERE 
    -- いずれかのカラムに「リンゴ」が含まれる場合に実行
    product_name LIKE '%リンゴ%' 
    OR description LIKE '%リンゴ%' 
    OR notes LIKE '%リンゴ%';
```

**解説：**
- 複数カラム更新時は`,`（カンマ）で区切る
- `OR`条件：どれか一つでも条件に合えば更新対象
- `NOW()`：現在の日時を取得する関数

### ステップ6: 更新結果の確認

```sql
-- 6. 更新されたレコードを確認
SELECT 
    id,
    product_name,
    description, 
    notes,
    updated_at                      -- 更新日時も確認
FROM apple_sales_weekly 
WHERE product_name LIKE '%リンゴ❤%'  -- 更新後の文字列で検索
   OR description LIKE '%リンゴ❤%'
   OR notes LIKE '%リンゴ❤%';

-- 更新件数も確認
SELECT ROW_COUNT() AS updated_records;  -- 直前のUPDATE文で影響を受けた行数
```

**解説：**
- 更新後の確認は必須作業
- `ROW_COUNT()`：直前のSQL文で影響を受けた行数を返す
- 期待する件数と一致するか必ずチェック

### ステップ7: トランザクションの確定または取消

```sql
-- 7a. 結果が正しい場合：変更を確定
COMMIT;    -- 全ての変更をデータベースに反映

-- 7b. 結果に問題がある場合：変更を取消
-- ROLLBACK;  -- 全ての変更を取り消してトランザクション開始前の状態に戻す
```

**解説：**
- `COMMIT`：変更を確定（この時点で他のユーザーからも見える状態になる）
- `ROLLBACK`：変更を取消（トランザクション開始前の状態に戻る）
- どちらか一方のみ実行

## 完全なバッチ処理スクリプト

```sql
-- ===============================================
-- リンゴ商品データ一括更新バッチ処理
-- 実行日：2025年1月XX日
-- 作業者：[あなたの名前]
-- ===============================================

-- 【事前確認】対象データ件数をチェック
SELECT COUNT(*) AS target_records 
FROM apple_sales_weekly 
WHERE product_name LIKE '%リンゴ%' 
   OR description LIKE '%リンゴ%' 
   OR notes LIKE '%リンゴ%';

-- 【安全対策】バックアップテーブル作成
DROP TABLE IF EXISTS apple_sales_weekly_backup;  -- 既存バックアップがあれば削除
CREATE TABLE apple_sales_weekly_backup 
AS SELECT * FROM apple_sales_weekly;

-- 【バックアップ確認】
SELECT COUNT(*) AS backup_records FROM apple_sales_weekly_backup;

-- 【処理開始】トランザクション開始
START TRANSACTION;

-- 【メイン処理】一括更新実行
UPDATE apple_sales_weekly 
SET 
    product_name = REPLACE(product_name, 'リンゴ', 'リンゴ❤'),
    description = REPLACE(description, 'リンゴ', 'リンゴ❤'),
    notes = REPLACE(notes, 'リンゴ', 'リンゴ❤'),
    updated_at = NOW()
WHERE 
    product_name LIKE '%リンゴ%' 
    OR description LIKE '%リンゴ%' 
    OR notes LIKE '%リンゴ%';

-- 【処理確認】更新結果をチェック
SELECT ROW_COUNT() AS updated_records;  -- 更新件数

-- 【結果確認】更新後のデータを確認
SELECT 
    id, product_name, description, notes, updated_at
FROM apple_sales_weekly 
WHERE product_name LIKE '%リンゴ❤%' 
   OR description LIKE '%リンゴ❤%' 
   OR notes LIKE '%リンゴ❤%'
LIMIT 10;  -- 最初の10件のみ表示

-- 【最終判断】結果が正しければCOMMIT、問題があればROLLBACK
-- COMMIT;    -- 正常時：変更を確定
-- ROLLBACK;  -- 異常時：変更を取消
```

## バッチ処理のベストプラクティス

### 1. 事前準備
- **必ずバックアップを作成**
- **テスト環境で事前検証**
- **影響範囲を事前に確認**

### 2. 処理中の安全対策
- **トランザクションを使用**
- **WHERE句を必ず指定**
- **段階的に処理（大量データの場合）**

### 3. 事後確認
- **更新件数の確認**
- **データの整合性チェック**
- **関連システムへの影響確認**

## まとめ

バッチ処理は効率的にデータを更新できる強力な手法ですが、**一度に大量のデータを変更するため慎重な準備と実行が必要**です。

**重要なポイント：**
- 事前のバックアップは必須
- トランザクションで安全性を確保  
- 段階的な確認を怠らない
- 本番実行前に必ずテスト環境で検証

これらを守ることで、安全で効率的なバッチ処理が実現できます。
