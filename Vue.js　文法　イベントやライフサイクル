Vue.jsコンポーネントの文法構造を視覚的に図解して解説します！

## 🏗️ **Vue.jsコンポーネント全体構造**

```
┌─────────────────────────────────────┐
│            Vue.js Component         │
├─────────────────────────────────────┤
│  <template>                         │
│    ┌─────────────────────────────┐   │
│    │      HTML Template          │   │
│    │  ┌─────────────────────────┐ │   │
│    │  │   Vue Directives        │ │   │
│    │  │   • v-if, v-for         │ │   │
│    │  │   • v-model, v-bind     │ │   │
│    │  │   • @click, @change     │ │   │
│    │  └─────────────────────────┘ │   │
│    └─────────────────────────────┘   │
│  </template>                        │
├─────────────────────────────────────┤
│  <script>                           │
│    ┌─────────────────────────────┐   │
│    │    Component Logic          │   │
│    │  ┌─────────────────────────┐ │   │
│    │  │ export default {        │ │   │
│    │  │   name: "Component"     │ │   │
│    │  │   props: {...}          │ │   │
│    │  │   data() { return {...}}│ │   │
│    │  │   computed: {...}       │ │   │
│    │  │   methods: {...}        │ │   │
│    │  │   mounted() {...}       │ │   │
│    │  │ }                       │ │   │
│    │  └─────────────────────────┘ │   │
│    └─────────────────────────────┘   │
│  </script>                          │
├─────────────────────────────────────┤
│  <style>                            │
│    CSS Styles                       │
│  </style>                           │
└─────────────────────────────────────┘
```

---

## 📝 **テンプレート構文の詳細図解**

### 1. **ディレクティブの文法構造**

```html
<!-- 基本文法パターン -->
<element v-directive:argument.modifier="expression">

<!-- 具体例の分解 -->
<select v-model="plan" @change="calcAmount()">
   ↑      ↑       ↑        ↑         ↑
   │      │       │        │         └─ 実行する処理
   │      │       │        └─ イベント名
   │      │       └─ バインドする変数
   │      └─ ディレクティブ名
   └─ HTML要素
```

### 2. **条件分岐の文法図解**

```html
<!-- v-if/v-else パターン -->
<div v-if="canCancerTreatment">
  <!-- 条件がtrueの時に表示 -->
  <select>...</select>
</div>
<p v-if="!canCancerTreatment">
  <!-- 条件がfalseの時に表示 -->
  お客様のご契約年齢では、お取り扱いできません。
</p>

┌─────────────────┐    True    ┌─────────────────┐
│ canCancerTreatment │ ────────→ │  select要素表示  │
│    (computed)      │           └─────────────────┘
└─────────────────┘    False   ┌─────────────────┐
                     ────────→ │ エラーメッセージ │
                               └─────────────────┘
```

### 3. **ループ処理の文法図解**

```html
<!-- v-for の基本構文 -->
<option v-for="(item, index) in array" :key="index" :value="item.code">
   ↑         ↑      ↑       ↑     ↑       ↑         ↑
   │         │      │       │     │       │         └─ バインドする値
   │         │      │       │     │       └─ 一意キー
   │         │      │       │     └─ 配列データ
   │         │      │       └─ インデックス（省略可）
   │         │      └─ 各要素
   │         └─ ループ構文
   └─ 繰り返される要素

<!-- データフロー図 -->
mainPlans = [
  { plan: 1, text: "3,000", price: 3000 },
  { plan: 2, text: "4,000", price: 4000 },
  { plan: 3, text: "5,000", price: 5000 }
]
         ↓ v-for で展開
<option value="1">3,000</option>
<option value="2">4,000</option>
<option value="3">5,000</option>
```

---

## ⚙️ **JavaScript部分の構造図解**

### 1. **Vueインスタンスの構造**

```javascript
export default {
  ┌─────────────────────────────────────┐
  │            Meta Data                │
  ├─────────────────────────────────────┤
  │ name: "ProductDetailSumameRabbit"   │ ← コンポーネント名
  │ props: { ... }                      │ ← 親から受け取るデータ
  │ components: { Modal }               │ ← 子コンポーネント
  ├─────────────────────────────────────┤
  │            Reactive Data            │
  ├─────────────────────────────────────┤
  │ data() {                            │
  │   return {                          │
  │     plan: 3,                        │ ← リアクティブなデータ
  │     mainPlans: [...],               │
  │     modalSumameRabbit: {...}        │
  │   }                                 │
  │ }                                   │
  ├─────────────────────────────────────┤
  │           Computed Properties       │
  ├─────────────────────────────────────┤
  │ computed: {                         │
  │   canSevenDiseasesExemptions() {    │ ← 算出プロパティ
  │     return this.isLessEqual80();    │
  │   }                                 │
  │ }                                   │
  ├─────────────────────────────────────┤
  │              Methods                │
  ├─────────────────────────────────────┤
  │ methods: {                          │
  │   calcAmount() { ... },             │ ← メソッド
  │   openModal() { ... },              │
  │   closeModal() { ... }              │
  │ }                                   │
  ├─────────────────────────────────────┤
  │           Lifecycle Hooks           │
  ├─────────────────────────────────────┤
  │ mounted() { ... },                  │ ← ライフサイクル
  │ destroyed() { ... }                 │
  └─────────────────────────────────────┘
}
```

### 2. **データフローの図解**

```
┌─────────────┐    ユーザー操作    ┌─────────────┐
│   Template  │ ←──────────────── │    User     │
│   (View)    │                   │  (Input)    │
└─────────────┘                   └─────────────┘
       ↓                                 ↓
    v-model                           @change
       ↓                                 ↓
┌─────────────┐    データ変更      ┌─────────────┐
│    data()   │ ←──────────────── │   methods   │
│ (リアクティブ) │                   │  (処理ロジック) │
└─────────────┘                   └─────────────┘
       ↓                                 ↓
    自動更新                          関連処理
       ↓                                 ↓
┌─────────────┐    依存関係       ┌─────────────┐
│  computed   │ ←──────────────── │    data     │
│ (算出プロパティ) │                   │   (更新)    │
└─────────────┘                   └─────────────┘
       ↓
    DOM更新
       ↓
┌─────────────┐
│   Template  │
│ (再レンダリング) │
└─────────────┘
```

---

## 🔄 **イベントハンドリングの文法図解**

### 1. **イベント構文の分解**

```html
<!-- 基本イベント文法 -->
<select @change="calcAmount()">
        ↑  ↑        ↑
        │  │        └─ 実行するメソッド
        │  └─ イベント名
        └─ イベントディレクティブ

<!-- 複数処理の連鎖 -->
<select @change="selectedWomanAmountItem(); dispOptionDeath(); calcAmount();">
               ↑──────────────────────────────────────────────────────────↑
               └─ セミコロンで区切って複数メソッドを順次実行

<!-- 引数付きメソッド -->
<button @click="openModal('mainBenefit')">
              ↑                ↑
              └─ メソッド名      └─ 引数
```

### 2. **イベント処理フローの図解**

```
ユーザーが select 要素を変更
         ↓
@change イベントが発火
         ↓
Vue.js がイベントをキャッチ
         ↓
指定されたメソッドを順次実行
         ↓
┌─────────────────────────────────┐
│ selectedWomanAmountItem()       │ ← 1番目: 選択肢を更新
│ ↓                               │
│ dispOptionDeath()               │ ← 2番目: 関連項目を更新  
│ ↓                               │
│ calcAmount()                    │ ← 3番目: 保険料を再計算
└─────────────────────────────────┘
         ↓
データの変更を検知
         ↓
テンプレートを再レンダリング
         ↓
画面の表示が更新される
```

---

## 📊 **データバインディングの文法図解**

### 1. **双方向バインディング（v-model）**

```html
<select v-model="plan">
        ↑       ↑
        │       └─ データプロパティ
        └─ 双方向バインディング

<!-- データフロー -->
┌─────────────┐  ユーザー選択  ┌─────────────┐
│   Select    │ ────────────→ │    plan     │
│   (View)    │                │   (data)    │
│             │ ←──────────── │             │
└─────────────┘  データ変更    └─────────────┘
```

### 2. **単方向バインディング（v-bind）**

```html
<option :value="mainPlan.plan" :key="index">
        ↑              ↑         ↑      ↑
        │              │         │      └─ 配列のインデックス
        │              │         └─ 省略記法（v-bind:key）
        │              └─ オブジェクトのプロパティ
        └─ 省略記法（v-bind:value）

<!-- データフロー（単方向） -->
┌─────────────┐    データ流れ   ┌─────────────┐
│ mainPlan    │ ────────────→ │   option    │
│  (data)     │                │   (View)    │
└─────────────┘                └─────────────┘
```

### 3. **条件付きバインディング**

```html
<select v-bind:disabled="womanMedicalDisableFlag">
        ↑               ↑
        │               └─ boolean値でdisabled属性を制御
        └─ 属性バインディング

<!-- 条件制御フロー -->
womanMedicalDisableFlag = true
         ↓
<select disabled>  ← 非活性状態

womanMedicalDisableFlag = false  
         ↓
<select>           ← 活性状態
```

---

## 🔧 **メソッドとComputedの違い図解**

### 1. **Methods（メソッド）**

```javascript
methods: {
  calcAmount() {
    // 呼び出される度に実行される
    console.log("計算実行！");
    return this.plan * 1000;
  }
}

// 呼び出しパターン
template: <button @click="calcAmount()">  ← 明示的に呼び出し
          calcAmount() ← 毎回実行される
```

### 2. **Computed（算出プロパティ）**

```javascript
computed: {
  canSevenDiseasesExemptions() {
    // 依存するデータが変わった時のみ実行
    console.log("年齢チェック実行！");
    return this.application.fullAge <= 80;
  }
}

// 実行パターン
template: <div v-if="canSevenDiseasesExemptions">  ← プロパティとして参照
          
this.application.fullAge = 25  ← 依存データ変更時のみ実行
          ↓
canSevenDiseasesExemptions が再計算される
```

### 3. **実行タイミングの比較図解**

```
【Methods】
ユーザー操作 → メソッド呼び出し → 毎回実行
ユーザー操作 → メソッド呼び出し → 毎回実行
ユーザー操作 → メソッド呼び出し → 毎回実行

【Computed】
依存データ変更 → 算出プロパティ実行 → 結果をキャッシュ
テンプレート参照 → キャッシュ値を返却 → 実行しない
テンプレート参照 → キャッシュ値を返却 → 実行しない
依存データ変更 → 算出プロパティ実行 → 新しい結果をキャッシュ
```

---

## 🔄 **ライフサイクルの文法図解**

```javascript
// ライフサイクルフック の順序
export default {
  created() {
    // ✅ データは利用可能
    // ❌ DOMはまだ利用不可
  },
  
  mounted() {
    // ✅ データ利用可能  
    // ✅ DOM利用可能
    window.addEventListener("resize", this.handleResize);
  },
  
  destroyed() {
    // 🧹 クリーンアップ処理
    window.removeEventListener("resize", this.handleResize);
  }
}
```

### ライフサイクル実行順序図

```
┌─────────────┐
│ インスタンス  │
│    作成      │
└─────────────┘
       ↓
┌─────────────┐
│   created   │ ← データ初期化、API呼び出し
└─────────────┘
       ↓
┌─────────────┐
│ DOM マウント │
└─────────────┘
       ↓
┌─────────────┐
│   mounted   │ ← DOM操作、イベントリスナー設定
└─────────────┘
       ↓
┌─────────────┐
│ コンポーネント│
│   使用中     │
└─────────────┘
       ↓
┌─────────────┐
│  destroyed  │ ← クリーンアップ処理
└─────────────┘
```

---

## 🎯 **実践的な文法パターン**

### 1. **動的クラスバインディング**

```html
<div :class="{ active: isActive, disabled: isDisabled }">
     ↑        ↑               ↑                ↑
     │        │               │                └─ boolean値
     │        │               └─ boolean値
     │        └─ オブジェクト形式
     └─ クラスバインディング

<!-- 配列形式 -->
<div :class="[baseClass, { active: isActive }]">
```

### 2. **動的スタイルバインディング**

```html
<div :style="{ color: textColor, fontSize: fontSize + 'px' }">
     ↑        ↑                    ↑
     │        │                    └─ 計算式
     │        └─ データプロパティ
     └─ スタイルバインディング
```

### 3. **イベント修飾子**

```html
<form @submit.prevent="handleSubmit">
             ↑       ↑
             │       └─ メソッド
             └─ prevent修飾子（event.preventDefault()）

<input @keyup.enter="search">
              ↑      ↑
              │      └─ メソッド
              └─ Enter キー修飾子
```

この文法図解を参考に、Vue.jsの構文を体系的に理解していけば、複雑なコンポーネントも読み解けるようになります！
